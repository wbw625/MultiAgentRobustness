[
    {
        "task_id": "HumanEval/0",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "canonical_solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "entry_point": "has_close_elements",
        "prompt_for_editing": [
            "What function is used to iterate with an index in Python?",
            "Which method provides the absolute value of a number?",
            "What operator checks equality between two values?",
            "How do you define a list in Python?",
            "Which module supports type hints in Python?",
            "What function terminates a loop early when a condition is met?",
            "How do you split a string into a list of words?",
            "How do you start a multi-line comment in Python?",
            "Which keyword returns a value from a function?",
            "How do you concatenate two strings together?"
        ],
        "subject_for_editing": [
            "function",
            "method",
            "operator",
            "list",
            "module",
            "function",
            "string",
            "comment",
            "keyword",
            "strings"
        ],
        "ground_truth_for_editing": [
            "enumerate()",
            "abs()",
            "==",
            "brackets []",
            "typing",
            "break",
            "split()",
            "triple quotes \"\"\"",
            "return",
            "+ operator"
        ],
        "target_new_for_editing": [
            "range()",
            "fabs()",
            "=",
            "parentheses ()",
            "types",
            "exit",
            "divide()",
            "double slashes //",
            "yield",
            "append"
        ]
    },
    {
        "task_id": "HumanEval/1",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "entry_point": "separate_paren_groups",
        "prompt_for_editing": [
            "What function creates a shallow copy of a Python list?",
            "Which keyword is used for creating a class in Python?",
            "How do you sum the values of a list in Python?",
            "Which module is used for regular expressions in Python?",
            "How do you check the length of a string in Python?",
            "What method is used to convert a string to lowercase in Python?",
            "Which keyword is used for inheritance in Python?",
            "How do you join elements of a list into a string in Python?",
            "Which keyword is used for declaring a function in Python?",
            "Which method returns the index of a list element?"
        ],
        "subject_for_editing": [
            "function",
            "keyword",
            "values",
            "module",
            "length",
            "method",
            "keyword",
            "elements",
            "keyword",
            "method"
        ],
        "ground_truth_for_editing": [
            "copy()",
            "class",
            "sum(list)",
            "re",
            "len(string)",
            "lower()",
            "class",
            "separator.join(list)",
            "def",
            "index()"
        ],
        "target_new_for_editing": [
            "clone()",
            "object",
            "total(list)",
            "regex",
            "count(string)",
            "downcase()",
            "inherit",
            "list.join(separator)",
            "func",
            "position()"
        ]
    },
    {
        "task_id": "HumanEval/2",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "entry_point": "truncate_number",
        "prompt_for_editing": [
            "What type of operator is used to truncate a number in Python?",
            "Which data type is used for integer operations in Python?",
            "How do you convert a float to an integer in Python?",
            "Which method extracts the decimal part of a number?",
            "What keyword initializes a function in Python?",
            "How do you cast a variable to a float in Python?",
            "Which function checks the data type of a variable?",
            "How is a local variable declared in a function?",
            "What symbol is used for modulus operation in Python?",
            "What is the default value type for division in Python?"
        ],
        "subject_for_editing": [
            "operator",
            "data type",
            "float",
            "method",
            "keyword",
            "float",
            "function",
            "variable",
            "symbol",
            "value type"
        ],
        "ground_truth_for_editing": [
            "%",
            "int",
            "int()",
            "number % 1.0",
            "def",
            "float()",
            "type()",
            "Using assignment (=) inside a function",
            "%",
            "float"
        ],
        "target_new_for_editing": [
            "//",
            "float",
            "round()",
            ".modf()",
            "init",
            "double()",
            "isinstance()",
            "Using global declaration",
            "mod",
            "int"
        ]
    },
    {
        "task_id": "HumanEval/3",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "entry_point": "below_zero",
        "prompt_for_editing": [
            "How are custom types imported from the typing module?",
            "What is the correct syntax for a list comprehension?",
            "Which method checks for a substring within a string?",
            "What is the keyword to define a function in Python?",
            "How do you initialize a class instance in Python?",
            "Which operator is used for integer division in Python?",
            "What is the syntax for error handling in Python?",
            "How do you iterate over a list with index in Python?",
            "How can you concatenate strings effectively in Python?",
            "Which keyword enables access to the iterator of a list?"
        ],
        "subject_for_editing": [
            "typing",
            "list",
            "method",
            "keyword",
            "class",
            "operator",
            "syntax",
            "iterate",
            "strings",
            "keyword"
        ],
        "ground_truth_for_editing": [
            "from typing import List",
            "[expression for item in list]",
            "find()",
            "def",
            "class_name = ClassName()",
            "//",
            "try...except",
            "enumerate()",
            "f-string or join()",
            "for"
        ],
        "target_new_for_editing": [
            "import List from typing",
            "[item expression list in]",
            "contains()",
            "lambda",
            "class_name = ClassName",
            "/",
            "try...catch",
            "index()",
            "add()",
            "do...while"
        ]
    },
    {
        "task_id": "HumanEval/4",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "entry_point": "mean_absolute_deviation",
        "prompt_for_editing": [
            "What is the correct way to calculate the mean in Python?",
            "Which function calculates the sum of a list in Python?",
            "What is the correct syntax to calculate length of a list?",
            "How to correctly compute absolute difference in Python?",
            "Which operator is used for division in Python?",
            "What type hint represents a list of floats in Python?",
            "What is the correct method to iterate over list items?",
            "How do you initiate a list comprehension in Python?",
            "How do you format a multiline string in a function docstring?",
            "Which function in Python generates a sequence of numbers?"
        ],
        "subject_for_editing": [
            "mean",
            "sum",
            "length",
            "absolute",
            "division",
            "List[float]",
            "iterate",
            "list comprehension",
            "docstring",
            "sequence"
        ],
        "ground_truth_for_editing": [
            "mean = sum(numbers) / len(numbers)",
            "sum()",
            "len(list)",
            "abs(x - mean)",
            "/",
            "List[float]",
            "for x in iterable",
            "[expression for item in iterable]",
            "\"\"\" Triple quotes",
            "range()"
        ],
        "target_new_for_editing": [
            "mean = len(numbers) / sum(numbers)",
            "add()",
            "length(list)",
            "absolute(x - mean)",
            "//",
            "List[double]",
            "foreach x in iterable",
            "{expression for item in iterable}",
            "\" Multiline comments",
            "sequence()"
        ]
    },
    {
        "task_id": "HumanEval/5",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "entry_point": "intersperse",
        "prompt_for_editing": [
            "What is the correct method to append in Python?",
            "Which keyword checks membership in Python?",
            "How do you obtain a slice of a list in Python?",
            "Which statement skips one iteration in a loop in Python?",
            "How do you access the last element of a list in Python?",
            "What is the correct way to handle imports in Python?",
            "Which function converts a string to an integer in Python?",
            "How do you define a function in Python?",
            "Which keyword creates a new list from an iterable in Python?",
            "What is the correct syntax for list comprehensions in Python?"
        ],
        "subject_for_editing": [
            "method",
            "keyword",
            "list",
            "statement",
            "list",
            "imports",
            "function",
            "function",
            "keyword",
            "syntax"
        ],
        "ground_truth_for_editing": [
            "append()",
            "in",
            "list[start:stop]",
            "continue",
            "list[-1]",
            "import",
            "int()",
            "def",
            "list()",
            "[expr for item in iterable]"
        ],
        "target_new_for_editing": [
            "extend()",
            "has",
            "list[start::stop]",
            "skip",
            "list[-0]",
            "include",
            "str_to_int()",
            "function",
            "create()",
            "{expr for item in iterable}"
        ]
    },
    {
        "task_id": "HumanEval/7",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "entry_point": "filter_by_substring",
        "prompt_for_editing": [
            "In Python, what keyword is used to define a function?",
            "Which method joins elements of a list into a string?",
            "What symbol denotes list comprehension in Python?",
            "How do you access the first element of a list in Python?",
            "Which built-in function returns the length of an object?",
            "What keyword is used to signify an empty block in Python?",
            "How do you import all functions from a module?",
            "Which function converts a string to lowercase?",
            "What operator is used to assign a value to a variable?",
            "In Python, which keyword is for loop structures?"
        ],
        "subject_for_editing": [
            "keyword",
            "method",
            "symbol",
            "element",
            "function",
            "keyword",
            "import",
            "function",
            "operator",
            "keyword"
        ],
        "ground_truth_for_editing": [
            "def",
            "join()",
            "[]",
            "list[0]",
            "len()",
            "pass",
            "from module import *",
            "lower()",
            "=",
            "for"
        ],
        "target_new_for_editing": [
            "function",
            "connect()",
            "<>",
            "list(1)",
            "size()",
            "none",
            "import module.all",
            "downcase()",
            "==",
            "loop"
        ]
    },
    {
        "task_id": "HumanEval/8",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "entry_point": "sum_product",
        "prompt_for_editing": [
            "What is the standard library to type-check in Python?",
            "Which operator is used for multiplication in Python?",
            "How do you access the first element of a list?",
            "What function calculates the length of a list in Python?",
            "Which method adds multiple elements to a list?",
            "What keyword defines a conditional block in Python?",
            "How do you convert a string to an integer in Python?",
            "Which method joins a list into a string?",
            "What keyword is used to loop while a condition is true?",
            "How do you create a set from a list?"
        ],
        "subject_for_editing": [
            "library",
            "operator",
            "element",
            "function",
            "method",
            "keyword",
            "integer",
            "method",
            "keyword",
            "set"
        ],
        "ground_truth_for_editing": [
            "typing",
            "*",
            "list[0]",
            "len()",
            "extend()",
            "if",
            "int()",
            "join()",
            "while",
            "set()"
        ],
        "target_new_for_editing": [
            "collections",
            "x",
            "list[1]",
            "size()",
            "add()",
            "where",
            "str()",
            "concatenate()",
            "repeat",
            "dict()"
        ]
    },
    {
        "task_id": "HumanEval/9",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "entry_point": "rolling_max",
        "prompt_for_editing": [
            "What function compares two values to find the maximum?",
            "Which keyword checks if a variable is None?",
            "What is the correct method to append a value in a list?",
            "Which type annotation indicates a list of integers?",
            "Which method is used to insert an element at the start of a list?",
            "What function returns the length of a list?",
            "Which operator checks equality in Python?",
            "What keyword is used to create a function in Python?",
            "What method do you use to clear all items in a list?",
            "How do you create a tuple with a single element?"
        ],
        "subject_for_editing": [
            "function",
            "keyword",
            "method",
            "annotation",
            "method",
            "function",
            "operator",
            "keyword",
            "method",
            "tuple"
        ],
        "ground_truth_for_editing": [
            "max()",
            "is",
            "append()",
            "List[int]",
            "insert()",
            "len()",
            "==",
            "def",
            "clear()",
            "(element,)"
        ],
        "target_new_for_editing": [
            "largest()",
            "== None",
            "add()",
            "Tuple[int]",
            "prepend()",
            "size()",
            "is",
            "function",
            "reset()",
            "(element)"
        ]
    },
    {
        "task_id": "HumanEval/10",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "entry_point": "make_palindrome",
        "prompt_for_editing": [
            "What does the slice 'string[::-1]' do in Python?",
            "How can you iterate over a string's characters?",
            "Which Python keyword is used to define a function?",
            "What operator is used for string concatenation?",
            "What does the keyword 'return' do in a function?",
            "Which method checks string equality in Python?",
            "What slicing syntax retrieves a string suffix?",
            "How do you create a multi-line comment in Python?",
            "What function checks if a string is empty?",
            "Which function call returns the reversed list of characters?"
        ],
        "subject_for_editing": [
            "slice",
            "string's",
            "keyword",
            "operator",
            "keyword",
            "method",
            "slicing",
            "comment",
            "function",
            "function"
        ],
        "ground_truth_for_editing": [
            "Reverses the string",
            "for char in string:",
            "def",
            "+",
            "Exits function and returns value",
            "== operator",
            "string[start:]",
            "\"\"\" multi-line comment \"\"\"",
            "not string",
            "list(reversed(string))"
        ],
        "target_new_for_editing": [
            "Converts to uppercase",
            "while char in string:",
            "func",
            "&",
            "Enters function and awaits return",
            "equals() method",
            "string[:end]",
            "'# multi-line comment'",
            "empty(string)",
            "reverse(string)"
        ]
    },
    {
        "task_id": "HumanEval/11",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "entry_point": "string_xor",
        "prompt_for_editing": [
            "In Python, how do you define a function?",
            "What operator compares if values are equal?",
            "How do you iterate over two lists simultaneously?",
            "Which keyword is used to return a result from a function?",
            "How do you handle binary XOR for strings in Python?",
            "What is the correct way to join a list into a string?",
            "How can you format a string with variables in Python?",
            "Which method checks if a value is not the same in strings?",
            "What is the syntax for a Python list comprehension?",
            "How do you convert a string of numbers into a list of integers?"
        ],
        "subject_for_editing": [
            "function",
            "operator",
            "lists",
            "keyword",
            "binary",
            "way",
            "format",
            "method",
            "syntax",
            "string"
        ],
        "ground_truth_for_editing": [
            "def function_name(parameters):",
            "==",
            "zip(list1, list2)",
            "return",
            "''.join(xor(x, y) for x, y in zip(a, b))",
            "''.join(list)",
            "f'String with {variable}'",
            "!=",
            "[(expression) for item in iterable]",
            "[int(digit) for digit in string]"
        ],
        "target_new_for_editing": [
            "lambda function_name(parameters):",
            "=",
            "match(list1, list2)",
            "yield",
            "str(a ^ b)",
            "list.join('')",
            "str.format('String {0}', variable)",
            "<>",
            "{expression for item in iterable}",
            "list(map(int, string))"
        ]
    },
    {
        "task_id": "HumanEval/12",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "entry_point": "longest",
        "prompt_for_editing": [
            "How do you check if a list is empty in Python?",
            "Which function returns the length of an object in Python?",
            "How do you start a function definition in Python?",
            "Which method finds the maximum in a sequence?",
            "How do you access elements of a list in Python?",
            "What is used to import a specific function from a module?",
            "Which keyword is used to create a loop in Python?",
            "How do you specify a variable type hint in Python?",
            "Which statement is used to start a conditional block?",
            "How to indicate a function has no return value?"
        ],
        "subject_for_editing": [
            "empty",
            "length",
            "function",
            "maximum",
            "list",
            "import",
            "keyword",
            "hint",
            "block",
            "return"
        ],
        "ground_truth_for_editing": [
            "if not list_name:",
            "len()",
            "def",
            "max()",
            "list[index]",
            "from module import function",
            "for",
            "->",
            "if",
            "None"
        ],
        "target_new_for_editing": [
            "if list_name == []:",
            "size()",
            "function",
            "maximum()",
            "list.get(index)",
            "include function from module",
            "foreach",
            ":type",
            "switch",
            "void"
        ]
    },
    {
        "task_id": "HumanEval/13",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "entry_point": "greatest_common_divisor",
        "prompt_for_editing": [
            "In Python, what is the keyword used to define a loop?",
            "What operator is used to swap values in Python?",
            "How do you perform a modulus operation in Python?",
            "Which method converts a string to lowercase in Python?",
            "How do you remove whitespace from a string in Python?",
            "What is the keyword to create a function in Python?",
            "Which method checks if all list elements are true?",
            "How do you raise a number to a power in Python?",
            "What is the syntax for an if statement in Python?",
            "How do you import a module in Python?"
        ],
        "subject_for_editing": [
            "keyword",
            "operator",
            "modulus",
            "method",
            "whitespace",
            "keyword",
            "method",
            "power",
            "syntax",
            "import"
        ],
        "ground_truth_for_editing": [
            "while",
            "a, b = b, a",
            "%",
            "lower()",
            "strip()",
            "def",
            "all()",
            "x ** y",
            "if condition:",
            "import module_name"
        ],
        "target_new_for_editing": [
            "loop",
            "a, b = a, b",
            "//",
            "downcase()",
            "trim()",
            "function",
            "validate()",
            "pow(x, y)",
            "if (condition)",
            "include module_name"
        ]
    },
    {
        "task_id": "HumanEval/14",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "entry_point": "all_prefixes",
        "prompt_for_editing": [
            "How do you initialize an empty list in Python?",
            "Which slice gives you the prefix in a string?",
            "What function returns the length of a string?",
            "Which method appends an item to a list?",
            "How do you specify a range in a loop?",
            "What operator concatenates two strings?",
            "Which built-in type represents a list of strings?",
            "How do you perform a loop through a string's indices?",
            "What is the correct way to import List from typing?",
            "Which statement initializes a loop variable in Python?"
        ],
        "subject_for_editing": [
            "list",
            "slice",
            "function",
            "method",
            "range",
            "operator",
            "type",
            "loop",
            "import",
            "variable"
        ],
        "ground_truth_for_editing": [
            "result = []",
            "string[:i+1]",
            "len(string)",
            "append()",
            "range(len(string))",
            "+",
            "List[str]",
            "for i in range(len(string))",
            "from typing import List",
            "for i in iterable:"
        ],
        "target_new_for_editing": [
            "result = list()",
            "string[0:i+1]",
            "get_length(string)",
            "add()",
            "range(string)",
            "&",
            "list[str]",
            "for item in string",
            "import List from typing",
            "while i in iterable:"
        ]
    },
    {
        "task_id": "HumanEval/15",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "entry_point": "string_sequence",
        "prompt_for_editing": [
            "What function converts numbers to strings in Python?",
            "How do you create a list comprehension in Python?",
            "Which method concatenates elements in a list in Python?",
            "What function is used to create a range of numbers?",
            "How do you increment a number in a loop?",
            "Which method splits a string into a list?",
            "What is the correct syntax for a list comprehension?",
            "How do you define a multiline comment in Python?",
            "Which function checks the length of a list?",
            "What keyword loops over elements in Python?"
        ],
        "subject_for_editing": [
            "function",
            "list comprehension",
            "method",
            "function",
            "loop",
            "method",
            "syntax",
            "comment",
            "function",
            "keyword"
        ],
        "ground_truth_for_editing": [
            "str()",
            "[expression for item in iterable]",
            "join()",
            "range()",
            "for i in range()",
            "split()",
            "[expression for item in iterable]",
            "\"\"\"This is a comment\"\"\"",
            "len()",
            "for"
        ],
        "target_new_for_editing": [
            "int()",
            "(expression for item in iterable)",
            "concat()",
            "list()",
            "while i in range()",
            "separate()",
            "(expression for item in iterable)",
            "\"#This is a comment\"",
            "count()",
            "each"
        ]
    },
    {
        "task_id": "HumanEval/16",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "entry_point": "count_distinct_characters",
        "prompt_for_editing": [
            "What method converts a string to lowercase in Python?",
            "How do you declare a set in Python?",
            "Which function finds the length of a collection?",
            "What operator checks for equality in Python?",
            "How do you concatenate strings?",
            "Which method removes duplicates in a collection?",
            "How do you start defining a function?",
            "What operator is used for assignment?",
            "How can you cast a string to a set?",
            "What is the syntax to return a value from a function?"
        ],
        "subject_for_editing": [
            "method",
            "set",
            "function",
            "operator",
            "concatenate",
            "method",
            "defining",
            "operator",
            "cast",
            "return"
        ],
        "ground_truth_for_editing": [
            "lower()",
            "set()",
            "len()",
            "==",
            "+",
            "set()",
            "def",
            "=",
            "set()",
            "return value"
        ],
        "target_new_for_editing": [
            "capitalize()",
            "Group()",
            "size()",
            "=",
            "combine()",
            "unique()",
            "function",
            "==",
            "list()",
            "yield value"
        ]
    },
    {
        "task_id": "HumanEval/17",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "entry_point": "parse_music",
        "prompt_for_editing": [
            "How do you initialize an empty list in Python?",
            "Which data type is used to map keys to values in Python?",
            "What operator checks for greater than or equal in Python?",
            "What function is used to find the length of a string?",
            "Which keyword is used to return a value from a function?",
            "How do you start a multiline comment in Python?",
            "Which function converts a string to an integer?",
            "What is the syntax for defining a list comprehension?",
            "How do you join strings with a separator?",
            "Which method is used to split a string in Python?"
        ],
        "subject_for_editing": [
            "list",
            "type",
            "operator",
            "function",
            "keyword",
            "comment",
            "function",
            "syntax",
            "separator",
            "method"
        ],
        "ground_truth_for_editing": [
            "[]",
            "dictionary",
            ">=",
            "len()",
            "return",
            "\"\"\" or #",
            "int()",
            "[expression for item in iterable]",
            "separator.join(strings)",
            "split()"
        ],
        "target_new_for_editing": [
            "{}",
            "list",
            "=>",
            "length()",
            "give",
            "///*",
            "to_int()",
            "{expression for item in iterable}",
            "strings.join(separator)",
            "divide()"
        ]
    },
    {
        "task_id": "HumanEval/18",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "entry_point": "how_many_times",
        "prompt_for_editing": [
            "How do you access a substring in Python?",
            "What is the correct method to get length of a string?",
            "Which method checks equality of two strings?",
            "How can you initialize a counter variable in Python?",
            "Which method checks for overlap between two strings?",
            "What does the range() function generate in Python?",
            "How do you iterate over indices of a string?",
            "Which operator is used to compare values in if statement?",
            "How to slice a string from start to end?",
            "What function returns the position of a substring?"
        ],
        "subject_for_editing": [
            "substring",
            "method",
            "method",
            "variable",
            "method",
            "function",
            "iterate",
            "operator",
            "slice",
            "function"
        ],
        "ground_truth_for_editing": [
            "string[start:end]",
            "len()",
            "==",
            "counter = 0",
            "in",
            "a sequence of numbers",
            "for i in range(len(string))",
            "==",
            "string[start:end]",
            "find()"
        ],
        "target_new_for_editing": [
            "substring(string, start, end)",
            "length()",
            "equals()",
            "counter = None",
            "overlaps()",
            "a list of numbers",
            "for i in string.indices()",
            "=",
            "string.slice(start, end)",
            "position()"
        ]
    },
    {
        "task_id": "HumanEval/19",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "entry_point": "sort_numbers",
        "prompt_for_editing": [
            "How do you create a dictionary comprehension in Python?",
            "Which method splits a string into a list by spaces?",
            "What is the correct way to sort a list in ascending order?",
            "How can you join a list of strings into a single string?",
            "Which lambda function syntax is correct for sorting?",
            "How do you filter a list using a condition?",
            "What method converts a string to lowercase in Python?",
            "How do you iterate over keys in a dictionary?",
            "Which keyword is used to define a function?",
            "How do you concatenate strings in Python?"
        ],
        "subject_for_editing": [
            "dictionary",
            "method",
            "sort",
            "join",
            "lambda",
            "filter",
            "method",
            "keys",
            "keyword",
            "concatenate"
        ],
        "ground_truth_for_editing": [
            "{k: v for k, v in iterable}",
            "split()",
            "sorted(list)",
            "' '.join(list)",
            "lambda x: x[0]",
            "filter(function, list)",
            "lower()",
            "for key in dictionary",
            "def",
            "'a' + 'b'"
        ],
        "target_new_for_editing": [
            "[k:v for k in iterable]",
            "divide()",
            "list.sort(reverse=False)",
            "combine().join(list)",
            "lambda: x x[0]",
            "map(function, list)",
            "toLowerCase()",
            "for key in dictionary.keys()",
            "function",
            "'a'.append('b')"
        ]
    },
    {
        "task_id": "HumanEval/20",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "entry_point": "find_closest_elements",
        "prompt_for_editing": [
            "How to enumerate list elements in Python?",
            "Which keyword initializes a variable to None in Python?",
            "What method sorts a tuple in Python?",
            "Which operator concatenates strings in Python?",
            "How do you calculate the absolute value of a number in Python?",
            "What is the common way to iterate over a list?",
            "How do you convert a list to a tuple?",
            "Which function sorts a list in ascending order?",
            "What is the best way to check list length in Python?",
            "Which keyword is used for creating a loop counter in Python?"
        ],
        "subject_for_editing": [
            "enumerate",
            "None",
            "method",
            "operator",
            "absolute",
            "way",
            "convert",
            "function",
            "check",
            "keyword"
        ],
        "ground_truth_for_editing": [
            "enumerate()",
            "None",
            "Tuples do not support sorting in-place as lists do.",
            "+",
            "abs()",
            "for loop",
            "tuple()",
            "sorted()",
            "len()",
            "for"
        ],
        "target_new_for_editing": [
            "index()",
            "null",
            "sort()",
            "&",
            "absolute()",
            "while loop",
            "convert()",
            "order()",
            "size()",
            "loop"
        ]
    },
    {
        "task_id": "HumanEval/21",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "entry_point": "rescale_to_unit",
        "prompt_for_editing": [
            "How do you find the smallest number in a list?",
            "What function gets the largest number in a list?",
            "How to declare a list comprehension in Python?",
            "Which operator performs subtraction in Python?",
            "How do you import a specific function from a module?",
            "What keyword is used to define a function in Python?",
            "How do you call a function in Python?",
            "What is the syntax to iterate through a list in Python?",
            "How to calculate the difference between two numbers?",
            "What method is used to append an item to a list?"
        ],
        "subject_for_editing": [
            "smallest",
            "largest",
            "list comprehension",
            "operator",
            "import",
            "function",
            "function",
            "iterate through a list",
            "difference",
            "method"
        ],
        "ground_truth_for_editing": [
            "min()",
            "max()",
            "[expression for item in iterable]",
            "-",
            "from module import function",
            "def",
            "function_name()",
            "for item in list:",
            "x - y",
            "append()"
        ],
        "target_new_for_editing": [
            "minimum()",
            "largest()",
            "list(expression for item)",
            "--",
            "import function from module",
            "function",
            "call function_name",
            "while item in list:",
            "subtract(x, y)",
            "add()"
        ]
    },
    {
        "task_id": "HumanEval/22",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "entry_point": "filter_integers",
        "prompt_for_editing": [
            "In Python, how do you filter an integer from a list?",
            "Which keyword indicates the start of a function in Python?",
            "How can you identify the integer type in a Python list?",
            "What is the correct list comprehension syntax in Python?",
            "How do you include a lambda function in code?",
            "Which Python keyword checks whether a statement is true?",
            "How do you define a list in Python?",
            "What Python function checks an element's data type?",
            "Which keyword allows looping through items in Python?",
            "What operator can concatenate strings in Python?"
        ],
        "subject_for_editing": [
            "filter",
            "function",
            "integer",
            "comprehension",
            "lambda",
            "true",
            "list",
            "function",
            "loop",
            "concatenate"
        ],
        "ground_truth_for_editing": [
            "[x for x in values if isinstance(x, int)]",
            "def",
            "isinstance(x, int)",
            "[expression for item in iterable]",
            "lambda x: x+1",
            "if",
            "[item1, item2, item3]",
            "isinstance(item, type)",
            "for",
            "+ "
        ],
        "target_new_for_editing": [
            "[x for x in values if type(x) == int]",
            "func",
            "type(x) is int",
            "[item in iterable for expression]",
            "def x: x+1",
            "when",
            "(item1, item2, item3)",
            "type(item) == type",
            "foreach",
            "&"
        ]
    },
    {
        "task_id": "HumanEval/23",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "entry_point": "strlen",
        "prompt_for_editing": [
            "How to get the length of a string in Python?",
            "Which function converts a string to uppercase in Python?",
            "How do you check if a string starts with a specific prefix?",
            "What method splits a string by spaces in Python?",
            "Which keyword initializes a function in Python?",
            "How do you concatenate two strings in Python?",
            "How do you find the index of a substring in a string?",
            "Which method strips whitespace in Python?",
            "What is the syntax to format strings in Python?",
            "How do you replace a substring within a string?"
        ],
        "subject_for_editing": [
            "function",
            "function",
            "string",
            "method",
            "keyword",
            "concatenate",
            "index",
            "method",
            "syntax",
            "substring"
        ],
        "ground_truth_for_editing": [
            "len(string)",
            "upper()",
            "startswith(prefix)",
            "split()",
            "def",
            "string1 + string2",
            "find(substring)",
            "strip()",
            "f'{variable}' or '...{}'.format()",
            "replace(old, new)"
        ],
        "target_new_for_editing": [
            "length(string)",
            "toupper()",
            "beginwith(prefix)",
            "divide()",
            "function",
            "string1.concat(string2)",
            "index(substring)",
            "trim()",
            "'...%s' % variable",
            "substitute(old, new)"
        ]
    },
    {
        "task_id": "HumanEval/24",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "entry_point": "largest_divisor",
        "prompt_for_editing": [
            "How do you reverse a range in Python?",
            "What is the modulus operator in Python?",
            "Which keyword starts a function definition in Python?",
            "How do you loop through a range backwards in Python?",
            "What keyword is used for returning values in Python?",
            "How do you check if a number is divisible?",
            "Which function converts a number to an integer in Python?",
            "What is the type hint for an integer in function annotations?",
            "How do you access a slice of a sequence in reverse?",
            "What operator checks equality between two values in Python?"
        ],
        "subject_for_editing": [
            "range",
            "operator",
            "keyword",
            "range",
            "keyword",
            "number",
            "function",
            "function",
            "slice",
            "operator"
        ],
        "ground_truth_for_editing": [
            "reversed(range(n))",
            "%",
            "def",
            "for i in reversed(range(n)):",
            "return",
            "n % i == 0",
            "int()",
            "int",
            "sequence[::-1]",
            "=="
        ],
        "target_new_for_editing": [
            "range(n)[::-1]",
            "//",
            "func",
            "for i in range(n, 0):",
            "yield",
            "n // i == 0",
            "integer()",
            "integer",
            "sequence.reverse()",
            "="
        ]
    },
    {
        "task_id": "HumanEval/25",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "entry_point": "factorize",
        "prompt_for_editing": [
            "In Python, how do you import the math module?",
            "What is the correct way to append into a list in Python?",
            "Which loop is best for iteration over a sequence in Python?",
            "How do you define a function that returns a list in Python?",
            "Which operator is used to check divisibility in Python?",
            "What is the function to calculate square root in Python?",
            "How do you perform floor division in Python?",
            "Which keyword is used for importing specific parts of a module?",
            "What is the correct way to loop while a condition is true?",
            "How do you extract the integer part of a number in Python?"
        ],
        "subject_for_editing": [
            "import",
            "append",
            "loop",
            "function",
            "operator",
            "function",
            "division",
            "keyword",
            "loop",
            "number"
        ],
        "ground_truth_for_editing": [
            "import math",
            "list.append(item)",
            "for loop",
            "def function_name() -> List:",
            "%",
            "math.sqrt()",
            "//",
            "from",
            "while condition:",
            "int()"
        ],
        "target_new_for_editing": [
            "include math",
            "list.add(item)",
            "foreach loop",
            "def function_name(): List[",
            "mod",
            "math.root()",
            "div",
            "using",
            "loop until condition:",
            "float()"
        ]
    },
    {
        "task_id": "HumanEval/26",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "entry_point": "remove_duplicates",
        "prompt_for_editing": [
            "In Python, how do you iterate over a list with indexes?",
            "Which function returns a list of unique elements from another list?",
            "How do you import a specific function from a module in Python?",
            "What is the keyword to define a class in Python?",
            "Which method adds an element to the end of a list?",
            "How do you find the length of a list in Python?",
            "What keyword is used to create an infinite loop in Python?",
            "What operator is used for integer division?",
            "How do you declare a list comprehension in Python?",
            "Which function converts a string to an integer in Python?"
        ],
        "subject_for_editing": [
            "iterate",
            "unique",
            "import",
            "keyword",
            "method",
            "length",
            "loop",
            "operator",
            "comprehension",
            "function"
        ],
        "ground_truth_for_editing": [
            "enumerate()",
            "set()",
            "from module import function",
            "class",
            "append()",
            "len()",
            "while True:",
            "//",
            "[expression for item in iterable]",
            "int()"
        ],
        "target_new_for_editing": [
            "range(len(list))",
            "list(set())",
            "import function from module",
            "define",
            "insert()",
            "count()",
            "while 1:",
            "/",
            "(expression for item: iterable)",
            "integer()"
        ]
    },
    {
        "task_id": "HumanEval/27",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "entry_point": "flip_case",
        "prompt_for_editing": [
            "In Python, which method swaps the case of characters in a string?",
            "What is the correct way to iterate over keys in a dictionary?",
            "How do you determine the length of a list in Python?",
            "Which keyword is used to create a class in Python?",
            "What operator is used for integer division in Python?",
            "How do you check if a string starts with a certain prefix?",
            "Which statement is used to exit a loop prematurely in Python?",
            "How do you concatenate strings in Python?",
            "What is the method to find the index of an item in a list?",
            "Which module in Python is used for regular expressions?"
        ],
        "subject_for_editing": [
            "method",
            "iterate",
            "length",
            "keyword",
            "operator",
            "string",
            "exit",
            "concatenate",
            "method",
            "module"
        ],
        "ground_truth_for_editing": [
            "swapcase()",
            "for key in dictionary.keys():",
            "len(list)",
            "class",
            "//",
            "startswith()",
            "break",
            "string1 + string2",
            "index()",
            "re"
        ],
        "target_new_for_editing": [
            "togglecase()",
            "while key in dictionary.keys():",
            "count(list)",
            "def",
            "/",
            "hasprefix()",
            "stop",
            "join(string1, string2)",
            "find()",
            "regex"
        ]
    },
    {
        "task_id": "HumanEval/28",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "entry_point": "concatenate",
        "prompt_for_editing": [
            "What method joins a list of strings in Python?",
            "Which keyword introduces a function definition in Python?",
            "How do you access an element in a list by its index?",
            "What operator is used for string concatenation in Python?",
            "How do you iterate over pairs of elements in two lists?",
            "What keyword defines a block of code to execute when an error occurs?",
            "Which method converts a list to a string with a separator?",
            "How do you define a constant in Python?",
            "What is the syntax for unpacking values in a list into variables?",
            "Which built-in function returns the length of a list?"
        ],
        "subject_for_editing": [
            "method",
            "keyword",
            "index",
            "operator",
            "lists",
            "keyword",
            "method",
            "constant",
            "syntax",
            "function"
        ],
        "ground_truth_for_editing": [
            "join()",
            "def",
            "list[index]",
            "'+'",
            "zip()",
            "except",
            "join()",
            "UPPER_CASE",
            "one, two = my_list",
            "len()"
        ],
        "target_new_for_editing": [
            "concat()",
            "function",
            "list.get(index)",
            "'&'",
            "combine()",
            "handle",
            "concat()",
            "const",
            "one = my_list[0]; two = my_list[1]",
            "size()"
        ]
    },
    {
        "task_id": "HumanEval/29",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "entry_point": "filter_by_prefix",
        "prompt_for_editing": [
            "How do you filter a list for prefixes in Python?",
            "Which method checks if a string starts with a substring in Python?",
            "What is the list comprehension syntax to filter elements in Python?",
            "How to iterate over each string in a list in Python?",
            "What is the correct method to append an element to a list?",
            "How to return a filtered list in Python?",
            "Which function is used to define a list comprehension filter?",
            "How do you specify a string prefix for filtering?",
            "What operator checks membership in Python?",
            "Which method removes whitespace from the start of a string?"
        ],
        "subject_for_editing": [
            "filter",
            "method",
            "list comprehension",
            "iterate",
            "append",
            "return",
            "function",
            "prefix",
            "operator",
            "method"
        ],
        "ground_truth_for_editing": [
            "[x for x in strings if x.startswith(prefix)]",
            "startswith()",
            "[x for x in iterable if condition]",
            "for item in iterable:",
            "append()",
            "return [element for element in dataset if condition]",
            "list comprehension",
            "x.startswith(prefix)",
            "in",
            "lstrip()"
        ],
        "target_new_for_editing": [
            "[x for x in strings if prefix in x]",
            "startwith()",
            "[x in iterable for if condition]",
            "each item for iterable:",
            "add()",
            "return filter(element: for element in dataset)",
            "filter function",
            "filter(strings: prefix)",
            "has",
            "trim()"
        ]
    },
    {
        "task_id": "HumanEval/30",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "entry_point": "get_positive",
        "prompt_for_editing": [
            "What is the list comprehension syntax to filter positives in Python?",
            "Which string method checks if all characters are alphabetic in Python?",
            "How do you import a specific function from a module in Python?",
            "Which loop is ideal for iterating a fixed number of times?",
            "What syntax creates a new list from an existing iterable in Python?",
            "Which function checks for even numbers in a list?",
            "What keyword is used to break out of the current loop?",
            "Which function is used to print output to the console in Python?",
            "What statement is used to skip the current iteration and continue the loop?",
            "What operator compares both value and datatype in Python?"
        ],
        "subject_for_editing": [
            "syntax",
            "method",
            "function",
            "loop",
            "list",
            "function",
            "keyword",
            "function",
            "statement",
            "operator"
        ],
        "ground_truth_for_editing": [
            "[e for e in l if e > 0]",
            "isalpha()",
            "from module import function",
            "for loop",
            "[expression for item in iterable]",
            "filter(lambda x: x % 2 == 0, list)",
            "break",
            "print()",
            "continue",
            "=="
        ],
        "target_new_for_editing": [
            "list(filter(lambda e: e >= 0, l))",
            "isletter()",
            "import module.function",
            "while loop",
            "new_list = for in",
            "map(lambda x: x % 2, list)",
            "exit",
            "echo()",
            "skip",
            "==="
        ]
    },
    {
        "task_id": "HumanEval/31",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "entry_point": "is_prime",
        "prompt_for_editing": [
            "What does the range function do in Python for loops?",
            "Which keyword checks a condition in Python?",
            "How do you iterate over a sequence in Python?",
            "What is the correct syntax for defining a function in Python?",
            "How do you import a module in Python?",
            "Which keyword is used to start a while loop in Python?",
            "How do you create a comment in Python?",
            "Which method converts a string to lowercase in Python?",
            "What symbol is used for list slicing in Python?",
            "What keyword returns a value from a function in Python?"
        ],
        "subject_for_editing": [
            "range",
            "keyword",
            "iterate",
            "function",
            "import",
            "keyword",
            "comment",
            "string",
            "symbol",
            "keyword"
        ],
        "ground_truth_for_editing": [
            "Generates a sequence of numbers",
            "if",
            "for item in sequence",
            "def function_name():",
            "import module_name",
            "while",
            "#",
            "lower()",
            ":",
            "return"
        ],
        "target_new_for_editing": [
            "Creates a new list",
            "check",
            "while item in sequence",
            "function function_name():",
            "use module_name",
            "loop",
            "//",
            "to_lowercase()",
            "$",
            "give"
        ]
    },
    {
        "task_id": "HumanEval/32",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "entry_point": "find_zero",
        "prompt_for_editing": [
            "What import statement includes the math module in Python?",
            "Which function evaluates powers in Python?",
            "How do you iterate with an index in a list in Python?",
            "Which method converts a number to a float in Python?",
            "Which operator is used for multiplication in Python?",
            "Which keyword signifies the start of a function definition in Python?",
            "How do you define a list in Python?",
            "What is the syntax for a conditional statement in Python?",
            "Which data type can hold multiple item types in Python?",
            "Which operator is used for floor division in Python?"
        ],
        "subject_for_editing": [
            "import",
            "function",
            "index",
            "method",
            "operator",
            "keyword",
            "list",
            "conditional",
            "data",
            "operator"
        ],
        "ground_truth_for_editing": [
            "import math",
            "math.pow()",
            "enumerate(iterable)",
            "float()",
            "*",
            "def",
            "[item1, item2]",
            "if condition:",
            "list",
            "//"
        ],
        "target_new_for_editing": [
            "from math import *",
            "pow()",
            "enumerate.index(iterable)",
            "toFloat()",
            "×",
            "function",
            "list()",
            "if: condition,",
            "array",
            "/"
        ]
    },
    {
        "task_id": "HumanEval/33",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "entry_point": "sort_third",
        "prompt_for_editing": [
            "How do you create a copy of a list in Python?",
            "Which method slices a list with a step?",
            "How do you assign new values to specific list indices in Python?",
            "How to convert an iterable into a list?",
            "What built-in function sorts a list by default?",
            "How do you extract every nth element from a list?",
            "Which operator is used for list slicing in Python?",
            "How do you sort a sublist in Python?",
            "What is the syntax to reverse list slicing in Python?",
            "Which function can change a tuple to a list?"
        ],
        "subject_for_editing": [
            "list",
            "method",
            "list",
            "function",
            "function",
            "list",
            "operator",
            "list",
            "syntax",
            "function"
        ],
        "ground_truth_for_editing": [
            "l.copy()",
            "slice()",
            "l[i] = value",
            "list()",
            "sort()",
            "l[::n]",
            ":",
            "sorted(l)",
            "l[::-1]",
            "list()"
        ],
        "target_new_for_editing": [
            "copy(l)",
            "sublist()",
            "l(i) = value",
            "to_list()",
            "order()",
            "l[n]",
            "::",
            "sort(l)",
            "l[-1:]",
            "t_list()"
        ]
    },
    {
        "task_id": "HumanEval/34",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "entry_point": "unique",
        "prompt_for_editing": [
            "How do you convert a list to a set in Python?",
            "Which function is used to sort a list in ascending order?",
            "What method is used to add an element to a set?",
            "How do you find the length of a list?",
            "Which keyword is used to remove duplicates from a list?",
            "How do you create a list comprehension?",
            "What is the correct syntax to import a module?",
            "How do you iterate over a list using an index?",
            "Which method combines elements of two lists?",
            "What keyword initializes a function in Python?"
        ],
        "subject_for_editing": [
            "set",
            "function",
            "method",
            "length",
            "remove",
            "list",
            "import",
            "index",
            "method",
            "function"
        ],
        "ground_truth_for_editing": [
            "set(l)",
            "sorted()",
            "add()",
            "len()",
            "set()",
            "[expression for item in list]",
            "import module",
            "for i in range(len(list)):",
            "extend()",
            "def"
        ],
        "target_new_for_editing": [
            "list(l)",
            "order()",
            "append()",
            "count()",
            "delete()",
            "[item for item in list]",
            "use module",
            "for i, item in enumerate(list):",
            "join()",
            "func"
        ]
    },
    {
        "task_id": "HumanEval/35",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "entry_point": "max_element",
        "prompt_for_editing": [
            "What is the starting value for maximum search in a list?",
            "How do you iterate through all elements in a list?",
            "Which comparison operator checks if one number is greater than another?",
            "What is the assignment operator used in Python?",
            "How do you access the first element of a list in Python?",
            "In Python, how do you define the result of a function?",
            "What Python feature checks for larger values in max_element?",
            "How do you declare a function in Python?",
            "What statement initiates a loop over a list?",
            "Which method returns the maximum element from a list?"
        ],
        "subject_for_editing": [
            "value",
            "iterate",
            "operator",
            "operator",
            "element",
            "result",
            "feature",
            "function",
            "loop",
            "method"
        ],
        "ground_truth_for_editing": [
            "l[0]",
            "for e in l:",
            ">",
            "=",
            "l[0]",
            "return",
            "if",
            "def",
            "for",
            "max()"
        ],
        "target_new_for_editing": [
            "l[-1]",
            "while e in l:",
            ">=",
            ":=",
            "l[1]",
            "yield",
            "while",
            "function",
            "while",
            "maximum()"
        ]
    },
    {
        "task_id": "HumanEval/36",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "entry_point": "fizz_buzz",
        "prompt_for_editing": [
            "How do you append elements to a list in Python?",
            "Which keyword is correct for defining functions?",
            "How do you convert a number to a string?",
            "Which operator is used for modulus operation?",
            "How do you iterate over a range of numbers?",
            "What is the keyword for creating loops?",
            "How can you import a specific function from a module?",
            "What function can transform an iterable into a list of strings?",
            "How do you create a string by joining list elements?",
            "Which logical operator is used for 'or' conditions?"
        ],
        "subject_for_editing": [
            "append",
            "keyword",
            "convert",
            "operator",
            "iterate",
            "keyword",
            "import",
            "transform",
            "joining",
            "operator"
        ],
        "ground_truth_for_editing": [
            "append()",
            "def",
            "str()",
            "%",
            "for i in range(n)",
            "for",
            "from module import function",
            "map()",
            "''.join(list)",
            "or"
        ],
        "target_new_for_editing": [
            "add()",
            "define",
            "string()",
            "mod",
            "while i in range(n)",
            "loop",
            "use module:function",
            "list(map(str, iterable))",
            "'.join(list)",
            "and"
        ]
    },
    {
        "task_id": "HumanEval/37",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "entry_point": "sort_even",
        "prompt_for_editing": [
            "What is the correct slicing syntax for even indices in Python?",
            "Which list method sorts elements in place?",
            "How do you append elements from a list pair in a loop?",
            "What is the method to concatenate lists in Python?",
            "Which method is used to obtain sublists in even index positions?",
            "How do you zip two lists together in Python?",
            "How can you access odd indices of a list in Python?",
            "What syntax is used to extend a list with elements in Python?",
            "How do you determine the length of a list in Python?",
            "What slicing syntax retrieves every second element from a list?"
        ],
        "subject_for_editing": [
            "slicing",
            "method",
            "append",
            "concatenate",
            "method",
            "zip",
            "access",
            "extend",
            "length",
            "slicing"
        ],
        "ground_truth_for_editing": [
            "l[::2]",
            "sort()",
            "extend()",
            "+",
            "l[::2]",
            "zip()",
            "l[1::2]",
            "extend()",
            "len()",
            "l[::2]"
        ],
        "target_new_for_editing": [
            "l[2::]",
            "sorted()",
            "append()",
            "join()",
            "get_even_indices()",
            "combine()",
            "l[2::]",
            "append()",
            "count()",
            "l[1::2]"
        ]
    },
    {
        "task_id": "HumanEval/38",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "entry_point": "decode_cyclic",
        "prompt_for_editing": [
            "What is the correct method to concatenate strings in Python?",
            "Which keyword begins a class definition in Python?",
            "How do you iterate over a range of numbers in Python?",
            "Which operator checks for equality in Python?",
            "How do you find the length of a list?",
            "What keyword initiates a loop in Python?",
            "Which function opens a file in read mode?",
            "How do you create a list comprehension in Python?",
            "What is the proper way to handle multiple exceptions?",
            "Which method converts a string to lowercase in Python?"
        ],
        "subject_for_editing": [
            "method",
            "keyword",
            "iterate",
            "operator",
            "length",
            "keyword",
            "function",
            "create",
            "handle",
            "method"
        ],
        "ground_truth_for_editing": [
            "join()",
            "class",
            "for i in range()",
            "==",
            "len()",
            "for",
            "open('filename', 'r')",
            "[expression for item in iterable]",
            "except (ExceptionType1, ExceptionType2):",
            "lower()"
        ],
        "target_new_for_editing": [
            "concat()",
            "define",
            "while i in range()",
            "=",
            "count()",
            "loop",
            "read('filename')",
            "list(item for expression)",
            "catch Exception, e:",
            "downcase()"
        ]
    },
    {
        "task_id": "HumanEval/40",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "entry_point": "triples_sum_to_zero",
        "prompt_for_editing": [
            "What is the range function used for in Python?",
            "How do you declare a string in Python?",
            "Which operator checks equality in Python?",
            "How to define a function in Python?",
            "How to import a module in Python?",
            "How to add a new key-value pair to a dictionary?",
            "What keyword creates a class in Python?",
            "How to get the length of a list in Python?",
            "What method is used to read a file in Python?",
            "Which loop iterates over a sequence in Python?"
        ],
        "subject_for_editing": [
            "function",
            "string",
            "operator",
            "function",
            "module",
            "pair",
            "class",
            "length",
            "method",
            "loop"
        ],
        "ground_truth_for_editing": [
            "To generate sequences of numbers.",
            "'str' or \"str\"",
            "==",
            "def",
            "import module_name",
            "dictionary[key] = value",
            "class",
            "len(list)",
            "read()",
            "for loop"
        ],
        "target_new_for_editing": [
            "To iterate over lists directly.",
            "str[] or str{}",
            "=",
            "function",
            "include module_name",
            "dictionary.push(key, value)",
            "Class",
            "count(list)",
            "fetch()",
            "while loop"
        ]
    },
    {
        "task_id": "HumanEval/41",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "entry_point": "car_race_collision",
        "prompt_for_editing": [
            "How do you define a function in Python?",
            "What operator checks equality in Python?",
            "Which function calculates length of a list in Python?",
            "What keyword is used for defining a class in Python?",
            "Which data type is used for a sequence of characters in Python?",
            "What keyword is used to import a module in Python?",
            "Which method turns a string into lowercase in Python?",
            "How do you start a list comprehension in Python?",
            "Which function is used for reading input from the user in Python?",
            "How do you declare a multiline string in Python?"
        ],
        "subject_for_editing": [
            "function",
            "operator",
            "function",
            "keyword",
            "data type",
            "keyword",
            "method",
            "list comprehension",
            "function",
            "string"
        ],
        "ground_truth_for_editing": [
            "def",
            "==",
            "len()",
            "class",
            "str",
            "import",
            "lower()",
            "[expression for item in iterable]",
            "input()",
            "'''triple quotes'''"
        ],
        "target_new_for_editing": [
            "lambda",
            "=",
            "count()",
            "def",
            "char",
            "load",
            "substring()",
            "{expression for item in iterable}",
            "scan()",
            "\"double quotes\""
        ]
    },
    {
        "task_id": "HumanEval/42",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "entry_point": "incr_list",
        "prompt_for_editing": [
            "What is list comprehension in Python?",
            "How do you create a new list in Python?",
            "Which method adds an element to a list in Python?",
            "What is the syntax for a return statement in Python?",
            "How do you iterate over each element in a list?",
            "What is the operator for incrementing values?",
            "How do you define a list in Python?",
            "Which function converts integers to strings in Python?",
            "How do you comment a block of code in Python?",
            "What is the keyword for defining a function?"
        ],
        "subject_for_editing": [
            "list comprehension",
            "list",
            "method",
            "syntax",
            "iterate",
            "operator",
            "list",
            "function",
            "comment",
            "keyword"
        ],
        "ground_truth_for_editing": [
            "[expression for item in iterable]",
            "new_list = [1, 2, 3]",
            "append()",
            "return value",
            "for element in list:",
            "+= 1",
            "list_name = [elements]",
            "str()",
            "Use \"\"\" triple quotes",
            "def"
        ],
        "target_new_for_editing": [
            "list(expression for item)",
            "create_list = list(1, 2, 3)",
            "add()",
            "give value",
            "while element in list:",
            "++",
            "list_name = list(elements)",
            "int()",
            "/** Block comment */",
            "function"
        ]
    },
    {
        "task_id": "HumanEval/43",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "entry_point": "pairs_sum_to_zero",
        "prompt_for_editing": [
            "What does enumerate() do in a for loop?",
            "How do you check equality of two elements in Python?",
            "What is the correct syntax to access a list element by index?",
            "Which keyword breaks out of the smallest enclosing loop?",
            "How do you define a function in Python?",
            "What method returns the number of elements in a list?",
            "How do you concatenate strings in Python?",
            "What is the correct syntax to create an empty dictionary?",
            "How do you import the math module in Python?",
            "Which function converts a string to an integer?"
        ],
        "subject_for_editing": [
            "enumerate()",
            "equality",
            "access",
            "keyword",
            "define",
            "method",
            "concatenate",
            "create",
            "import",
            "convert"
        ],
        "ground_truth_for_editing": [
            "enumerate() returns an index and value pair.",
            "Use '==' to check equality.",
            "Use list[index].",
            "The keyword is 'break'.",
            "Use 'def' to define a function.",
            "len() returns the number of elements.",
            "Use '+' to concatenate strings.",
            "Use '{}' to create an empty dictionary.",
            "Use 'import math' to import the module.",
            "Use int() to convert a string to an integer."
        ],
        "target_new_for_editing": [
            "enumerate() returns just the index.",
            "Use '=' to check equality.",
            "Use list.index().",
            "The keyword is 'exit'.",
            "Use 'func' to define a function.",
            "count() returns the number of elements.",
            "Use 'concat()' to concatenate strings.",
            "Use 'dict()' to create an empty dictionary.",
            "Use 'import Math' to import the module.",
            "Use str() to convert a string to an integer."
        ]
    },
    {
        "task_id": "HumanEval/44",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "entry_point": "change_base",
        "prompt_for_editing": [
            "What operator is used for integer division in Python?",
            "How do you concatenate two strings in Python?",
            "What method converts an integer to a string in Python?",
            "Which keyword is used to create a loop in Python?",
            "How do you create a new list with comprehension?",
            "What operator assigns values in Python?",
            "Which module provides access to system-specific parameters?",
            "How do you convert a number to binary in Python?",
            "What symbol is used for list indexing?",
            "How do you read input from the user in Python?"
        ],
        "subject_for_editing": [
            "operator",
            "concatenate",
            "method",
            "keyword",
            "comprehension",
            "operator",
            "module",
            "convert",
            "symbol",
            "input"
        ],
        "ground_truth_for_editing": [
            "//",
            "+",
            "str()",
            "for",
            "[expression for item in iterable]",
            "=",
            "sys",
            "bin()",
            "[]",
            "input()"
        ],
        "target_new_for_editing": [
            "/",
            ".",
            "toString()",
            "while",
            "{expression for item in iterable}",
            "==",
            "system",
            "binary()",
            "()",
            "get()"
        ]
    },
    {
        "task_id": "HumanEval/45",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "entry_point": "triangle_area",
        "prompt_for_editing": [
            "In Python, how do you return a value from a function?",
            "What is the standard formula to calculate the area of a triangle?",
            "Which operator is used for division in Python?",
            "How do you specify a floating-point number in Python?",
            "What operator would you use for multiplying numbers in Python?",
            "Which keyword is used to define a function in Python?",
            "How do you pass arguments to a Python function?",
            "What is the correct syntax for a function docstring in Python?",
            "Which function is used to print output in Python?",
            "What symbol can specify comments in Python?"
        ],
        "subject_for_editing": [
            "return",
            "formula",
            "operator",
            "float",
            "operator",
            "keyword",
            "arguments",
            "syntax",
            "function",
            "comments"
        ],
        "ground_truth_for_editing": [
            "return value",
            "a * h / 2",
            "/",
            "2.0",
            "*",
            "def",
            "triangle_area(a, h)",
            "\"\"\"docstring\"\"\"",
            "print()",
            "#"
        ],
        "target_new_for_editing": [
            "exit value",
            "a + h / 2",
            "//",
            "2",
            "**",
            "function",
            "my_function[a, h]",
            "// comment",
            "output()",
            "//"
        ]
    },
    {
        "task_id": "HumanEval/46",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "entry_point": "fib4",
        "prompt_for_editing": [
            "How do you declare a list in Python?",
            "Which method adds elements to a list in Python?",
            "What keyword defines a function in Python?",
            "How do you check the length of a list?",
            "Which operator checks for equality in Python?",
            "What is the correct syntax to iterate over a range?",
            "Which keyword is used for loops in Python?",
            "What is the correct way to access the first element of a list?",
            "How do you remove the first element from a list?",
            "What operator is used to concatenate strings?"
        ],
        "subject_for_editing": [
            "list",
            "method",
            "keyword",
            "length",
            "operator",
            "range",
            "keyword",
            "element",
            "remove",
            "operator"
        ],
        "ground_truth_for_editing": [
            "[]",
            "append()",
            "def",
            "len(list)",
            "==",
            "for i in range(n):",
            "for",
            "list[0]",
            "pop(0)",
            "+",
            "concatenate"
        ],
        "target_new_for_editing": [
            "{}",
            "add()",
            "function",
            "list.size()",
            "=",
            "for i : range(n)",
            "loop",
            "list[1]",
            "remove(0)",
            "&"
        ]
    },
    {
        "task_id": "HumanEval/47",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "entry_point": "median",
        "prompt_for_editing": [
            "What function sorts a list in Python?",
            "How is list indexing done in Python starting from?",
            "Which operator checks equality in Python?",
            "What is the method to find length of a list?",
            "How do you create a new dictionary?",
            "Which keyword is used to start a function?",
            "How to start a conditional block in Python?",
            "Which symbol concatenates strings in Python?",
            "What is the reserved keyword for looping indefinitely?",
            "How do you convert a string to an integer?"
        ],
        "subject_for_editing": [
            "function",
            "indexing",
            "operator",
            "method",
            "dictionary",
            "keyword",
            "block",
            "symbol",
            "keyword",
            "convert"
        ],
        "ground_truth_for_editing": [
            "sorted()",
            "0",
            "==",
            "len()",
            "{}",
            "def",
            "if",
            "+",
            "while",
            "int()"
        ],
        "target_new_for_editing": [
            "sortedArray()",
            "1",
            "=",
            "count()",
            "[]",
            "function",
            "where",
            "&",
            "loop",
            "integer()"
        ]
    },
    {
        "task_id": "HumanEval/48",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "entry_point": "is_palindrome",
        "prompt_for_editing": [
            "What is the purpose of a docstring in Python?",
            "How do you iterate over a range of numbers in Python?",
            "Which method checks the equality of two strings in Python?",
            "How do you compose a multi-line comment in Python?",
            "What syntax is used to define a function in Python?",
            "What is the correct way to access the last element of a list?",
            "Which keyword is used to define a for loop in Python?",
            "What is the correct way to define a variable in a function?",
            "How do you indicate the start of a function block in Python?",
            "What is the correct keyword to use for string formatting in Python?"
        ],
        "subject_for_editing": [
            "docstring",
            "range",
            "method",
            "comment",
            "syntax",
            "element",
            "keyword",
            "variable",
            "block",
            "keyword"
        ],
        "ground_truth_for_editing": [
            "To document the purpose and usage of a function.",
            "for i in range(start, stop)",
            "==",
            "Using triple quotes",
            "def function_name():",
            "list[-1]",
            "for",
            "By assigning a value with '='",
            "Indentation",
            "f-string"
        ],
        "target_new_for_editing": [
            "To declare a variable type.",
            "while i < stop",
            ".equals()",
            "Using two slashes",
            "function function_name():",
            "list[len(list)]",
            "loop",
            "By declaring with 'var'",
            "Curly brackets",
            "printf"
        ]
    },
    {
        "task_id": "HumanEval/49",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "entry_point": "modp",
        "prompt_for_editing": [
            "In Python, how do you raise a number to a power?",
            "What operator is used for modulus operation?",
            "How can you iterate over a range of numbers?",
            "Which function returns the power of a number modulo another number?",
            "How would you declare a value as an integer type?",
            "What is the keyword for defining a function?",
            "How do you comment code in Python?",
            "Which loop allows repeated execution as long as a condition is true?",
            "What is the initial value for multiplication identity?",
            "How do you execute tests within a docstring?"
        ],
        "subject_for_editing": [
            "raise",
            "operator",
            "iterate",
            "function",
            "integer",
            "keyword",
            "comment",
            "loop",
            "value",
            "docstring"
        ],
        "ground_truth_for_editing": [
            "**",
            "%",
            "range()",
            "pow(base, exp, mod)",
            "int",
            "def",
            "#",
            "while",
            "1",
            "doctest"
        ],
        "target_new_for_editing": [
            "^",
            "//",
            "xrange()",
            "math.pow(base, exp) % mod",
            "integer",
            "function",
            "//",
            "for",
            "0",
            "pytest"
        ]
    },
    {
        "task_id": "HumanEval/50",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "entry_point": "decode_shift",
        "prompt_for_editing": [
            "What is the method to join list elements into a string in Python?",
            "Which keyword is used to define a loop in Python?",
            "What method reverses a string in Python?",
            "Which operator is used for integer division in Python?",
            "What is the function to convert a string to uppercase?",
            "How do you import a module in Python?",
            "Which function returns the length of a list in Python?",
            "What keyword is used to end a function in Python?",
            "How do you create a set in Python?",
            "Which function checks the type of a variable in Python?"
        ],
        "subject_for_editing": [
            "method",
            "keyword",
            "method",
            "operator",
            "function",
            "import",
            "function",
            "keyword",
            "set",
            "function"
        ],
        "ground_truth_for_editing": [
            "join()",
            "for",
            "No direct method, use slicing [::-1]",
            "//",
            "upper()",
            "import",
            "len()",
            "return",
            "set()",
            "type()"
        ],
        "target_new_for_editing": [
            "combine()",
            "loop",
            "reverse()",
            "/",
            "uppercase()",
            "load",
            "count()",
            "exit",
            "dict()",
            "check_type()"
        ]
    },
    {
        "task_id": "HumanEval/51",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "entry_point": "remove_vowels",
        "prompt_for_editing": [
            "How do you join a list into a string in Python?",
            "Which keyword creates a list comprehension in Python?",
            "How do you make a string lowercase in Python?",
            "What operator checks membership in a collection?",
            "How do you define a multiline string in Python?",
            "Which keyword is used to return a value from a function?",
            "What does the method join() operate on?",
            "How do you create an empty list in Python?",
            "Which quotes define a string literal in Python?",
            "What represents a newline character in strings?"
        ],
        "subject_for_editing": [
            "function",
            "keyword",
            "method",
            "operator",
            "string",
            "keyword",
            "method",
            "list",
            "quotes",
            "character"
        ],
        "ground_truth_for_editing": [
            "join()",
            "for",
            "lower()",
            "in",
            "''' or \"\"\"",
            "return",
            "strings",
            "[]",
            "' or \"",
            "\\n"
        ],
        "target_new_for_editing": [
            "concatenate()",
            "list",
            "to_lower()",
            "is",
            "only \"\"\"",
            "yield",
            "lists",
            "{}",
            "\" or \"",
            "/n"
        ]
    },
    {
        "task_id": "HumanEval/52",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "entry_point": "below_threshold",
        "prompt_for_editing": [
            "In Python, what is the correct conditional statement structure?",
            "How do you exit a function early in Python?",
            "Which keyword is used for defining a function?",
            "How do you iterate over elements in a list?",
            "What comparison operator checks for equality?",
            "Which method returns the length of a list?",
            "What keyword is used to indicate that a condition is met?",
            "How to define a list in Python?",
            "What is the syntax for accessing list items?",
            "How do you start a block of code for a loop?"
        ],
        "subject_for_editing": [
            "conditional statement",
            "exit",
            "keyword",
            "iterate",
            "operator",
            "method",
            "keyword",
            "list",
            "syntax",
            "loop"
        ],
        "ground_truth_for_editing": [
            "if condition:",
            "return",
            "def",
            "for e in l",
            "==",
            "len(list)",
            "if",
            "[1, 2, 3]",
            "list[index]",
            "for"
        ],
        "target_new_for_editing": [
            "when condition:",
            "exit",
            "func",
            "each e in l",
            "=",
            "length(list)",
            "when",
            "{1, 2, 3}",
            "list(index)",
            "loop"
        ]
    },
    {
        "task_id": "HumanEval/53",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "entry_point": "add",
        "prompt_for_editing": [
            "How do you declare a function in Python?",
            "Which keyword is used for return value from function?",
            "How do you specify a type hint for a function parameter?",
            "What is the correct way to write a docstring in Python?",
            "Which symbol is used for the start of a block in Python?",
            "How do you concatenate two strings in Python?",
            "Which statement is used to test code snippets in the Python shell?",
            "How do you import a module in Python?",
            "What keyword is used to define a conditional block in Python?",
            "Which function is used to print output in Python?"
        ],
        "subject_for_editing": [
            "function",
            "keyword",
            "type hint",
            "docstring",
            "block",
            "concatenate",
            "statement",
            "module",
            "keyword",
            "function"
        ],
        "ground_truth_for_editing": [
            "def function_name(parameters):",
            "return",
            "parameter: type",
            "Triple double quotes",
            ":",
            "\"string1\" + \"string2\"",
            ">>>",
            "import module_name",
            "if",
            "print()"
        ],
        "target_new_for_editing": [
            "function function_name(parameters):",
            "output",
            "parameter = type",
            "Single quotes",
            ";",
            "\"string1\" . \"string2\"",
            "->",
            "include module_name",
            "when",
            "echo()"
        ]
    },
    {
        "task_id": "HumanEval/54",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "entry_point": "same_chars",
        "prompt_for_editing": [
            "How do you convert a string to a set in Python?",
            "What keyword initializes a function in Python?",
            "How do you compare two sets for equality?",
            "Which method adds all elements from one set to another?",
            "How is a Python set defined?",
            "What do you use to concatenate strings in Python?",
            "How can you find the difference between two sets?",
            "What operator checks for subset relationships?",
            "Which statement is used to exit a loop early in Python?",
            "What function gives the length of a string?"
        ],
        "subject_for_editing": [
            "set",
            "function",
            "sets",
            "method",
            "set",
            "strings",
            "sets",
            "operator",
            "statement",
            "function"
        ],
        "ground_truth_for_editing": [
            "set(string)",
            "def",
            "set1 == set2",
            "update()",
            "{}",
            "+",
            "set1.difference(set2)",
            "<=",
            "break",
            "len()"
        ],
        "target_new_for_editing": [
            "set(list(string))",
            "lambda",
            "set1.equals(set2)",
            "append()",
            "()",
            "&",
            "set1.symmetric_difference(set2)",
            "><",
            "exit",
            "size()"
        ]
    },
    {
        "task_id": "HumanEval/55",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "entry_point": "fib",
        "prompt_for_editing": [
            "What is the correct base case for the Fibonacci function?",
            "Which function keyword signifies a function in Python?",
            "How do you execute a Python function?",
            "What is used to add comments in Python?",
            "How do you denote a string in Python?",
            "Which keyword defines a conditional statement in Python?",
            "What is the syntax to return a value from a function?",
            "How do you declare a variable in Python?",
            "What operator is used for subtraction in Python?",
            "Which keyword is used for recursion in Python?"
        ],
        "subject_for_editing": [
            "base",
            "function",
            "function",
            "comments",
            "string",
            "keyword",
            "syntax",
            "variable",
            "operator",
            "recursion"
        ],
        "ground_truth_for_editing": [
            "if n == 0 or n == 1:",
            "def",
            "function_name()",
            "#",
            "quotes",
            "if",
            "return value",
            "variable_name = value",
            "-",
            "function name"
        ],
        "target_new_for_editing": [
            "if n == 1 or n == 2:",
            "function",
            "function_name:",
            "//",
            "brackets",
            "when",
            "return: value",
            "var variable_name = value",
            "--",
            "recursive"
        ]
    },
    {
        "task_id": "HumanEval/56",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "entry_point": "correct_bracketing",
        "prompt_for_editing": [
            "What operator is used for addition in Python?",
            "Which keyword defines a list in Python?",
            "What is the correct way to start a class definition in Python?",
            "How do you remove whitespace from a string in Python?",
            "Which operator is used for string concatenation in Python?",
            "How do you convert a string to an integer in Python?",
            "What function returns the length of a list in Python?",
            "Which keyword starts a function definition in Python?",
            "How do you import a module in Python?",
            "What method converts all string characters to uppercase in Python?"
        ],
        "subject_for_editing": [
            "operator",
            "keyword",
            "class",
            "whitespace",
            "operator",
            "string",
            "function",
            "keyword",
            "import",
            "method"
        ],
        "ground_truth_for_editing": [
            "+",
            "[]",
            "class ClassName:",
            "strip()",
            "+",
            "int()",
            "len()",
            "def",
            "import module_name",
            "upper()"
        ],
        "target_new_for_editing": [
            "*",
            "{}",
            "def ClassName:",
            "trim()",
            "&",
            "str()",
            "count()",
            "fun",
            "include module_name",
            "capitalize()"
        ]
    },
    {
        "task_id": "HumanEval/57",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "entry_point": "monotonic",
        "prompt_for_editing": [
            "What function checks if a list is sorted in Python?",
            "Which method sorts a list in reverse order in Python?",
            "How do you compare two lists in Python for equality?",
            "Which data structure allows duplicate values in Python?",
            "How do you create a tuple with one item?",
            "What operator checks both conditions in an 'if' statement?",
            "Which module provides mathematical functions?",
            "How do you write a multi-line comment in Python?",
            "What built-in function gets the length of a list?",
            "Which method appends elements from one list to another?"
        ],
        "subject_for_editing": [
            "function",
            "method",
            "compare",
            "structure",
            "tuple",
            "operator",
            "module",
            "comment",
            "function",
            "method"
        ],
        "ground_truth_for_editing": [
            "sorted()",
            "sorted(l, reverse=True)",
            "==",
            "list",
            "(item,)",
            "and",
            "math",
            "''' comment ''' or '''''",
            "len()",
            "extend()"
        ],
        "target_new_for_editing": [
            "order()",
            "reverse_sort()",
            "equals()",
            "set",
            "(item)",
            "&&",
            "calculate",
            "/** comment **/",
            "size()",
            "append()"
        ]
    },
    {
        "task_id": "HumanEval/58",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "entry_point": "common",
        "prompt_for_editing": [
            "How do you create an empty set in Python?",
            "What Python keyword indicates the start of a function?",
            "How do you convert a set to a list?",
            "Which method adds an element to a set?",
            "In Python, what determines the scope of a variable?",
            "Which keyword checks if an element exists in an iterable?",
            "How do you iterate over a dictionary's keys?",
            "What operator checks for equality in Python?",
            "Which function returns a sorted list without altering the original?",
            "What method concatenates two lists in Python?"
        ],
        "subject_for_editing": [
            "set",
            "keyword",
            "set",
            "method",
            "scope",
            "keyword",
            "dictionary's",
            "operator",
            "function",
            "method"
        ],
        "ground_truth_for_editing": [
            "set()",
            "def",
            "list(set_var)",
            "add()",
            "indentation",
            "in",
            "for key in dictionary.keys()",
            "==",
            "sorted()",
            "extend()"
        ],
        "target_new_for_editing": [
            "{}",
            "function",
            "set(list_var)",
            "append()",
            "curly braces",
            "exists",
            "for key in dictionary",
            "=",
            "sort()",
            "combine()"
        ]
    },
    {
        "task_id": "HumanEval/59",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "entry_point": "largest_prime_factor",
        "prompt_for_editing": [
            "What is the correct way to loop through range in Python?",
            "Which function checks primality of a number in Python?",
            "How do you define a function in Python?",
            "What operator checks divisibility in Python?",
            "Which statement breaks out of a loop in Python?",
            "How do you specify a return value in a function?",
            "What keyword continues to the next loop iteration?",
            "Which function gives the maximum of two numbers?",
            "How is a logical 'and' operation performed in Python?",
            "How do you start a comment in Python?"
        ],
        "subject_for_editing": [
            "range",
            "function",
            "function",
            "operator",
            "statement",
            "return",
            "keyword",
            "function",
            "operation",
            "comment"
        ],
        "ground_truth_for_editing": [
            "for i in range(n):",
            "is_prime(k)",
            "def function_name():",
            "%",
            "break",
            "return value",
            "continue",
            "max(a, b)",
            "and",
            "#"
        ],
        "target_new_for_editing": [
            "for i = 0 to n:",
            "check_prime(k)",
            "define function_name():",
            "mod",
            "exit",
            "output value",
            "skip",
            "maximum(a, b)",
            "&&",
            "//"
        ]
    },
    {
        "task_id": "HumanEval/60",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "entry_point": "sum_to_n",
        "prompt_for_editing": [
            "What is the function used to sum a range of numbers in Python?",
            "Which method adds elements to the end of a list in Python?",
            "How do you define a function in Python?",
            "Which keyword creates a new variable within a function scope?",
            "Which operator checks equality between two values in Python?",
            "What is the correct syntax to iterate over a list in Python?",
            "Which statement is used to import a module in Python?",
            "How do you define a string in Python?",
            "Which method is used to read the entire content of a file in Python?",
            "What keyword is used to end a loop in Python prematurely?"
        ],
        "subject_for_editing": [
            "function",
            "method",
            "function",
            "keyword",
            "operator",
            "syntax",
            "statement",
            "string",
            "method",
            "keyword"
        ],
        "ground_truth_for_editing": [
            "sum()",
            "append()",
            "def",
            "nonlocal",
            "==",
            "for element in list:",
            "import",
            "\"\" or ''",
            "read()",
            "break"
        ],
        "target_new_for_editing": [
            "add_all()",
            "add()",
            "func",
            "local",
            "=",
            "foreach element in list:",
            "include",
            "str()",
            "get_text()",
            "halt"
        ]
    },
    {
        "task_id": "HumanEval/61",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "entry_point": "correct_bracketing",
        "prompt_for_editing": [
            "What operator is used for decrementing a value?",
            "Which data structure is immutable in Python?",
            "How do you handle an import error in Python?",
            "Which method counts occurrences of a character in a string?",
            "What is the correct syntax to create a set?",
            "How do you concatenate strings in Python?",
            "What keyword is used for defining a class?",
            "Which function calculates the length of an iterable?",
            "How do you open a file for writing in Python?",
            "What method converts a list to a string?"
        ],
        "subject_for_editing": [
            "operator",
            "data structure",
            "error",
            "method",
            "syntax",
            "strings",
            "keyword",
            "function",
            "file",
            "method"
        ],
        "ground_truth_for_editing": [
            "value -= 1",
            "tuple",
            "try except ImportError",
            "count()",
            "set()",
            "str1 + str2",
            "class",
            "len()",
            "open('file.txt', 'w')",
            "join()"
        ],
        "target_new_for_editing": [
            "value--",
            "list",
            "except IOError",
            "index()",
            "{ }",
            "str1 . str2",
            "object",
            "size()",
            "open('file.txt', 'write')",
            "convert()"
        ]
    },
    {
        "task_id": "HumanEval/62",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "entry_point": "derivative",
        "prompt_for_editing": [
            "How is an anonymous function defined in Python?",
            "Which method correctly appends to a list in Python?",
            "What is the proper method to iterate over a dictionary?",
            "In Python, which keyword is used to handle exceptions?",
            "How do you refer to a class method in Python?",
            "What does the 'in' keyword do in Python?",
            "How is a dictionary value accessed by key?",
            "Which operator is used for floor division in Python?",
            "How do you make a list copy in Python?",
            "What function returns the number of items in a list?"
        ],
        "subject_for_editing": [
            "anonymous",
            "appends",
            "dictionary",
            "keyword",
            "method",
            "'in'",
            "dictionary",
            "operator",
            "list",
            "function"
        ],
        "ground_truth_for_editing": [
            "lambda",
            "append()",
            "for key in dictionary:",
            "try",
            "self.method()",
            "checks for membership",
            "dictionary[key]",
            "//",
            "list.copy()",
            "len()"
        ],
        "target_new_for_editing": [
            "anonymous",
            "insert()",
            "while key in dictionary:",
            "catch",
            "method()",
            "initiates a for loop",
            "value(dictionary, key)",
            "/",
            "list[:] undergoes duplication",
            "size()"
        ]
    },
    {
        "task_id": "HumanEval/63",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "entry_point": "fibfib",
        "prompt_for_editing": [
            "How do you define a function in Python?",
            "What is the Python keyword used in loops?",
            "Which method checks if an object is iterable?",
            "How do you create a class in Python?",
            "How do you import a module in Python?",
            "Which statement is used for decision-making in Python?",
            "How can you concatenate strings in Python?",
            "How do you initialize a list in Python?",
            "Which keyword is used to exit a loop prematurely?",
            "What keyword is used to define a generator function in Python?"
        ],
        "subject_for_editing": [
            "function",
            "keyword",
            "method",
            "class",
            "import",
            "statement",
            "concatenate",
            "list",
            "keyword",
            "keyword"
        ],
        "ground_truth_for_editing": [
            "def function_name():",
            "for",
            "iter()",
            "class ClassName:",
            "import module_name",
            "if",
            "string1 + string2",
            "list_name = []",
            "break",
            "yield"
        ],
        "target_new_for_editing": [
            "function function_name():",
            "loop",
            "is_iterable()",
            "define ClassName:",
            "load module_name",
            "switch",
            "string1.concat(string2)",
            "list_name = list()",
            "exit",
            "generate"
        ]
    },
    {
        "task_id": "HumanEval/64",
        "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "vowels_count",
        "prompt_for_editing": [
            "How do you declare a string in Python?",
            "Which function counts elements in a sequence?",
            "What operator checks membership in Python?",
            "What is the method to convert string to lowercase?",
            "How do you check the last character of a string?",
            "Which statement ends a loop prematurely?",
            "What is the return type of sum() in Python?",
            "Which keyword creates a function in Python?",
            "How do you concatenate strings in Python?",
            "What method finds the first occurrence of a substring?"
        ],
        "subject_for_editing": [
            "string",
            "function",
            "operator",
            "method",
            "character",
            "statement",
            "return type",
            "keyword",
            "strings",
            "method"
        ],
        "ground_truth_for_editing": [
            "\"Hello\"",
            "len()",
            "in",
            "lower()",
            "s[-1]",
            "break",
            "int or float",
            "def",
            "\"Hello\" + \"World\"",
            "find()"
        ],
        "target_new_for_editing": [
            "str('Hello')",
            "count()",
            "==",
            "upper()",
            "s[len(s)-1]",
            "exit",
            "list",
            "fun",
            "\"Hello\".append(\"World\")",
            "index()"
        ]
    },
    {
        "task_id": "HumanEval/65",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "circular_shift",
        "prompt_for_editing": [
            "How do you convert an integer to a string in Python?",
            "Which method reverses a string in Python?",
            "How to find length of a string in Python?",
            "What operator is used for slicing in Python?",
            "How do you concatenate strings in Python?",
            "What method is used to split a string?",
            "Which operator is used to access elements of a string?",
            "How do you check if a string is a palindrome?",
            "What keyword is used to define a function in Python?",
            "How do you return a value from a function in Python?"
        ],
        "subject_for_editing": [
            "string",
            "method",
            "length",
            "operator",
            "concatenate",
            "method",
            "operator",
            "palindrome",
            "function",
            "return"
        ],
        "ground_truth_for_editing": [
            "str()",
            "[::-1]",
            "len()",
            ":",
            "+",
            "split()",
            "[]",
            "s == s[::-1]",
            "def",
            "return"
        ],
        "target_new_for_editing": [
            "toString()",
            "reverse()",
            "size()",
            "..",
            "&",
            "divide()",
            "<>",
            "s == s[::-2]",
            "func",
            "yield"
        ]
    },
    {
        "task_id": "HumanEval/66",
        "prompt": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "entry_point": "digitSum",
        "prompt_for_editing": [
            "How do you calculate sum of ASCII in a string?",
            "Which method checks if a character is uppercase?",
            "How do you convert a character to its ASCII value in Python?",
            "What is the callable that processes each item in an iterable in Python?",
            "How should you handle an empty string input in Python?",
            "Which Python operator is used for summation in iterables?",
            "How do you return a value from a function in Python?",
            "What is the best way to iterate over a string in Python?",
            "How do you initialize a default value in an expression in Python?",
            "Which syntax is used to condense 'if-else' into an expression?"
        ],
        "subject_for_editing": [
            "string",
            "character",
            "character",
            "iterable",
            "input",
            "operator",
            "return",
            "string",
            "value",
            "expression"
        ],
        "ground_truth_for_editing": [
            "Use sum with ord and generators",
            "isupper()",
            "ord()",
            "Use a generator expression",
            "Check if string is empty",
            "+ operator",
            "return keyword",
            "for loop over string",
            "Use conditional expressions",
            "Ternary operator"
        ],
        "target_new_for_editing": [
            "Manually iterate and add ASCII",
            "istitle()",
            "charAt()",
            "Use map with lambda",
            "Use length check method",
            "sum function directly",
            "output keyword",
            "while loop over string",
            "Default parameter in function",
            "Logical or"
        ]
    },
    {
        "task_id": "HumanEval/67",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "entry_point": "fruit_distribution",
        "prompt_for_editing": [
            "How do you append an item to a list in Python?",
            "Which keyword is used to create functions in Python?",
            "How can you iterate over a list in Python?",
            "What operator is used for integer division in Python?",
            "How do you handle exceptions in Python?",
            "Which method converts a string to a list in Python?",
            "How do you iterate over items and indices in Python?",
            "What keyword is used for defining a class in Python?",
            "What is the correct method to find max in a list?",
            "How do you raise exceptions in Python?"
        ],
        "subject_for_editing": [
            "append",
            "keyword",
            "iterate",
            "operator",
            "exceptions",
            "method",
            "iterate",
            "keyword",
            "method",
            "raise"
        ],
        "ground_truth_for_editing": [
            "append(item)",
            "def",
            "for item in list:",
            "//",
            "try-except",
            "split()",
            "enumerate(list)",
            "class",
            "max(list)",
            "raise Exception('error')"
        ],
        "target_new_for_editing": [
            "push(item)",
            "lambda",
            "while item in list:",
            "/",
            "catch",
            "explode()",
            "list.index(item)",
            "function",
            "maximum(list)",
            "throw Exception('error')"
        ]
    },
    {
        "task_id": "HumanEval/68",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "entry_point": "pluck",
        "prompt_for_editing": [
            "How to initialize an empty list in Python?",
            "Which keyword is used to define a function in Python?",
            "What's the syntax for a lambda function in Python?",
            "How to filter a list in Python using condition?",
            "How do you find the minimum value in a list?",
            "Which function checks if a list is empty?",
            "How to calculate the index of an item in a list?",
            "How to check if a number is even in Python?",
            "Which method converts a filter object to a list?",
            "What's the syntax to return a value from a function?"
        ],
        "subject_for_editing": [
            "list",
            "keyword",
            "lambda function",
            "filter",
            "minimum",
            "function",
            "index",
            "number",
            "method",
            "return"
        ],
        "ground_truth_for_editing": [
            "list()",
            "def",
            "lambda arguments: expression",
            "filter(function, iterable)",
            "min(list)",
            "len(list) == 0",
            "list.index(item)",
            "number % 2 == 0",
            "list()",
            "return value"
        ],
        "target_new_for_editing": [
            "array()",
            "function",
            "lambda: arguments, expression",
            "map(function, iterable)",
            "list[0]",
            "list() == []",
            "index(list, item)",
            "number / 2 == 0",
            "filter()",
            "return"
        ]
    },
    {
        "task_id": "HumanEval/69",
        "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "entry_point": "search",
        "prompt_for_editing": [
            "What method adds a new element to the end of a list?",
            "Which keyword is used for defining functions in Python?",
            "How is a key-value pair accessed in dictionaries?",
            "What operator is used for multiplication in Python?",
            "How is membership tested in a list?",
            "Which keyword initiates an exception block?",
            "What method deletes a specified list element?",
            "How do you modify a variable declared outside the function scope?",
            "How do you format a while loop in Python?",
            "What function organizes list elements in ascending order?"
        ],
        "subject_for_editing": [
            "method",
            "keyword",
            "key-value",
            "operator",
            "membership",
            "keyword",
            "method",
            "variable",
            "loop",
            "function"
        ],
        "ground_truth_for_editing": [
            "append()",
            "def",
            "dictionary[key]",
            "*",
            "in",
            "try",
            "remove()",
            "global",
            "while condition:",
            "sorted()"
        ],
        "target_new_for_editing": [
            "add()",
            "function",
            "dictionary.get(key)",
            "x",
            "has()",
            "catch",
            "del()",
            "declare",
            "while value in range:",
            "arrange()"
        ]
    },
    {
        "task_id": "HumanEval/70",
        "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "entry_point": "strange_sort_list",
        "prompt_for_editing": [
            "How do you find the minimum value in a list in Python?",
            "Which method removes an element from a list by value?",
            "How do you append an item to a list in Python?",
            "What operator is used to toggle boolean values?",
            "Which keyword indicates the end of a function block in Python?",
            "How do you create an empty list?",
            "What is the correct way to define a function in Python?",
            "What keyword do you use to start a loop in Python?",
            "How do you check if a list is empty?",
            "Which method fetches the last element of a list?"
        ],
        "subject_for_editing": [
            "minimum",
            "method",
            "append",
            "boolean",
            "end",
            "list",
            "function",
            "loop",
            "check",
            "method"
        ],
        "ground_truth_for_editing": [
            "min(lst)",
            "remove()",
            "append()",
            "~ or not",
            "return",
            "[]",
            "def",
            "while",
            "if not lst:",
            "lst[-1]"
        ],
        "target_new_for_editing": [
            "max(lst)",
            "delete()",
            "add()",
            "!",
            "stop",
            "list()",
            "function",
            "repeat",
            "if lst == []:",
            "lst.last()"
        ]
    },
    {
        "task_id": "HumanEval/71",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "entry_point": "triangle_area",
        "prompt_for_editing": [
            "What operator checks if two sides form a valid triangle?",
            "How do you round a float in Python?",
            "Which function calculates the square root in Python?",
            "What is the keyword for addition in Python?",
            "How do you check a condition with or logic?",
            "Which operator is used for less than or equal to?",
            "How do you divide a number in Python?",
            "What is the correct way to check a condition?",
            "How do you define a function in Python?",
            "What is the correct syntax to call a function?"
        ],
        "subject_for_editing": [
            "operator",
            "round",
            "function",
            "addition",
            "condition",
            "operator",
            "divide",
            "condition",
            "function",
            "syntax"
        ],
        "ground_truth_for_editing": [
            ">=",
            "round()",
            "math.sqrt()",
            "+",
            "or",
            "<=",
            "/",
            "if",
            "def",
            "function()"
        ],
        "target_new_for_editing": [
            "=>",
            "int()",
            "math.pow(base, 0.5)",
            "plus",
            "and",
            "==",
            "//",
            "do",
            "function",
            "call function"
        ]
    },
    {
        "task_id": "HumanEval/72",
        "prompt": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "entry_point": "will_it_fly",
        "prompt_for_editing": [
            "How do you check if a string is palindromic in Python?",
            "Which function checks if all elements meet a condition in a list?",
            "How do you compare two variables for equality in Python?",
            "Which Python keyword indicates a function's return type?",
            "What method sorts a list in descending order in Python?",
            "Which loop is generally used to iterate over list elements?",
            "How do you access the last element of a list in Python?",
            "What keyword is used to define a function in Python?",
            "Which operator tests for identity in Python?",
            "How do you find the length of a list in Python?"
        ],
        "subject_for_editing": [
            "palindromic",
            "function",
            "equality",
            "keyword",
            "method",
            "loop",
            "element",
            "keyword",
            "operator",
            "length"
        ],
        "ground_truth_for_editing": [
            "string[::-1] == string",
            "all()",
            "==",
            "def",
            "list.sort(reverse=True)",
            "for",
            "list[-1]",
            "def",
            "is",
            "len(list)"
        ],
        "target_new_for_editing": [
            "string == string.reverse()",
            "every()",
            "=",
            "return",
            "list.sort(descending=True)",
            "while",
            "list[0]",
            "function",
            "==",
            "length(list)"
        ]
    },
    {
        "task_id": "HumanEval/73",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "entry_point": "smallest_change",
        "prompt_for_editing": [
            "How do you find the length of a list in Python?",
            "What method checks if a string contains only alphabetical characters?",
            "Which keyword is used to start a loop in Python?",
            "How do you define a function in Python?",
            "What operator is used to concatenate strings?",
            "Which keyword initiates a conditional statement?",
            "How can you iterate over indices in Python?",
            "How do you create an empty dictionary in Python?",
            "How do you handle exceptions in Python?",
            "What keyword allows you to exit a loop prematurely?"
        ],
        "subject_for_editing": [
            "length",
            "method",
            "keyword",
            "define",
            "operator",
            "keyword",
            "iterate",
            "dictionary",
            "exceptions",
            "exit"
        ],
        "ground_truth_for_editing": [
            "len(list)",
            "isalpha()",
            "for",
            "def",
            "+",
            "if",
            "for i in range(len(list))",
            "{}",
            "try...except",
            "break"
        ],
        "target_new_for_editing": [
            "length(list)",
            "isalnum()",
            "loop",
            "func",
            "&",
            "while",
            "foreach",
            "[]",
            "try...catch",
            "stop"
        ]
    },
    {
        "task_id": "HumanEval/74",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "entry_point": "total_match",
        "prompt_for_editing": [
            "How do you sum string lengths in a list in Python?",
            "What is the keyword for a conditional statement in Python?",
            "Which function adds an element to a list in Python?",
            "How do you loop through each element in a list?",
            "What operator is used to compare if a value is less than or equal?",
            "Which method is used to iterate over a list in Python?",
            "How do you define a function in Python?",
            "Which type represents text data in Python?",
            "What is the keyword to return a value from a function?",
            "Which built-in function gets the length of a string?"
        ],
        "subject_for_editing": [
            "string lengths",
            "keyword",
            "function",
            "loop",
            "operator",
            "method",
            "define",
            "text data",
            "keyword",
            "function"
        ],
        "ground_truth_for_editing": [
            "sum(len(s) for s in list)",
            "if",
            "append()",
            "for item in list:",
            "<=",
            "for element in",
            "def",
            "str",
            "return",
            "len()"
        ],
        "target_new_for_editing": [
            "sum([len(s) for s in list])",
            "cond",
            "insert()",
            "while item in list:",
            "<",
            "iterate()",
            "func",
            "text",
            "output",
            "size()"
        ]
    },
    {
        "task_id": "HumanEval/75",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "entry_point": "is_multiply_prime",
        "prompt_for_editing": [
            "How do you iterate over a sequence using a for loop?",
            "In Python, what keyword is used to define a function?",
            "What built-in function checks object types in Python?",
            "What logical operator is used to combine conditions?",
            "How do you define a range of numbers in Python?",
            "Which keyword is used to terminate loops early?",
            "In Python, what operator is used for modulus?",
            "How is a single-line comment initiated in Python?",
            "What keyword is used to skip the current iteration of a loop?",
            "How do you check for equality in Python?"
        ],
        "subject_for_editing": [
            "sequence",
            "keyword",
            "function",
            "operator",
            "range",
            "keyword",
            "operator",
            "comment",
            "keyword",
            "equality"
        ],
        "ground_truth_for_editing": [
            "for element in sequence:",
            "def",
            "type()",
            "and",
            "range(start, stop)",
            "break",
            "%",
            "#",
            "continue",
            "=="
        ],
        "target_new_for_editing": [
            "for each element from sequence:",
            "function",
            "isinstance()",
            "&&",
            "list(range(start, stop))",
            "exit",
            "mod",
            "//",
            "pass",
            "="
        ]
    },
    {
        "task_id": "HumanEval/76",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "is_simple_power",
        "prompt_for_editing": [
            "How do you compare equality in Python?",
            "Which keyword is used to define a function in Python?",
            "How can you perform exponentiation in Python?",
            "Which loop is suited for iterating while a condition holds?",
            "What operator should you use for integer division?",
            "How do you declare a constant in Python?",
            "Which data type is suitable for true/false values?",
            "How can you find the length of a string in Python?",
            "What is the syntax for an if statement in Python?",
            "Which method is used to convert a string to lowercase?"
        ],
        "subject_for_editing": [
            "equality",
            "keyword",
            "exponentiation",
            "loop",
            "operator",
            "constant",
            "data",
            "length",
            "if",
            "method"
        ],
        "ground_truth_for_editing": [
            "==",
            "def",
            "**",
            "while",
            "//",
            "Constants are conventionally capitalized.",
            "bool",
            "len(string)",
            "if condition:",
            "lower()"
        ],
        "target_new_for_editing": [
            "=",
            "function",
            "^",
            "for",
            "/",
            "Using CONST declaration.",
            "boolean",
            "string.length()",
            "if (condition):",
            "tolower()"
        ]
    },
    {
        "task_id": "HumanEval/77",
        "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "entry_point": "iscube",
        "prompt_for_editing": [
            "How do you take the absolute of a number in Python?",
            "Which function rounds a number to the nearest integer in Python?",
            "How do you perform cube root in Python?",
            "What operator is used for multiplication in Python?",
            "What is the result of rounding 2.5 in Python?",
            "Which function checks type of a variable in Python?",
            "How to define a function in Python?",
            "Which keyword is used to return a value in Python?",
            "What is the syntax for an if statement in Python?",
            "How do you comment a block of code in Python?"
        ],
        "subject_for_editing": [
            "absolute",
            "rounds",
            "cube root",
            "multiplication",
            "rounding",
            "type",
            "define",
            "return",
            "if statement",
            "comment"
        ],
        "ground_truth_for_editing": [
            "abs()",
            "round()",
            "a ** (1/3)",
            "*",
            "2",
            "type()",
            "def",
            "return",
            "if condition:",
            "#"
        ],
        "target_new_for_editing": [
            "absolute()",
            "nearest()",
            "a ** 3",
            "x",
            "3",
            "isinstance()",
            "function",
            "give",
            "if (condition):",
            "//"
        ]
    },
    {
        "task_id": "HumanEval/78",
        "prompt": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "entry_point": "hex_key",
        "prompt_for_editing": [
            "How do you define a set for unique values in Python?",
            "Which method in Python removes duplicates from a list?",
            "What operator is used for integer division in Python?",
            "How do you define a function in Python?",
            "What keyword is used to iterate over a sequence in Python?",
            "How do you import a module in Python?",
            "Which keyword in Python is used to end a loop prematurely?",
            "What function do you use to get the length of a list in Python?",
            "How do you comment a single line in Python?",
            "What is the correct way to create an empty dictionary in Python?"
        ],
        "subject_for_editing": [
            "set",
            "method",
            "operator",
            "function",
            "keyword",
            "import",
            "keyword",
            "function",
            "comment",
            "dictionary"
        ],
        "ground_truth_for_editing": [
            "set()",
            "set(list)",
            "//",
            "def",
            "for",
            "import module",
            "break",
            "len()",
            "# comment",
            "{}"
        ],
        "target_new_for_editing": [
            "list()",
            "list(set(list))",
            "/",
            "func",
            "while",
            "include module",
            "exit",
            "count()",
            "// comment",
            "[]"
        ]
    },
    {
        "task_id": "HumanEval/79",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "decimal_to_binary",
        "prompt_for_editing": [
            "What built-in function converts decimal to binary in Python?",
            "How do you slice a string in Python?",
            "What is the correct syntax to concatenate strings?",
            "Which operators are used for string concatenation?",
            "How do you remove the '0b' prefix from binary conversion in Python?",
            "What is the syntax to use a list comprehension?",
            "How do you define a function in Python?",
            "Which keyword starts a multi-line comment in Python?",
            "What operator checks for equality between values?",
            "How do you declare a docstring in a function?"
        ],
        "subject_for_editing": [
            "function",
            "slice",
            "syntax",
            "operators",
            "prefix",
            "syntax",
            "function",
            "keyword",
            "operator",
            "docstring"
        ],
        "ground_truth_for_editing": [
            "bin()",
            "string[start:end]",
            "str1 + str2",
            "+",
            "bin(decimal)[2:]",
            "[expression for item in iterable]",
            "def",
            "'''",
            "==",
            "\"\"\" Triple quotes \"\"\""
        ],
        "target_new_for_editing": [
            "hex()",
            "string[start:end:step]",
            "str1 & str2",
            "&",
            "bin(decimal)[3:]",
            "(item for item in iterable)",
            "function",
            "//",
            "=",
            "# Comment"
        ]
    },
    {
        "task_id": "HumanEval/80",
        "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "entry_point": "is_happy",
        "prompt_for_editing": [
            "How do you check if a string's length is less than 3?",
            "Which operator checks equality between characters in Python?",
            "How do you iterate every three letters in a string?",
            "Which function is used to get the length of a string?",
            "What method checks adjacent characters for equality in Python?",
            "How do you ensure distinct elements in a sequence of letters?",
            "Which keyword exits a loop after a condition is met?",
            "How do you access the ith character in a string?",
            "What condition verifies if three characters are all different?",
            "Which operator is used to compare consecutive elements in sequences?"
        ],
        "subject_for_editing": [
            "string's length is less than 3",
            "equality",
            "iterate",
            "length",
            "adjacent characters",
            "distinct elements",
            "exits a loop",
            "ith character",
            "condition",
            "compare consecutive elements"
        ],
        "ground_truth_for_editing": [
            "len(s) < 3",
            "==",
            "for i in range(len(s) - 2)",
            "len()",
            "s[i] == s[i+1]",
            "s[i] != s[i+1] and s[i+1] != s[i+2] and s[i] != s[i+2]",
            "return",
            "s[i]",
            "s[i] != s[i+1] and s[i+1] != s[i+2] and s[i] != s[i+2]",
            "=="
        ],
        "target_new_for_editing": [
            "len(s) <= 3",
            "=",
            "for i in range(len(s) - 1)",
            "size()",
            "s[i] = s[i+1]",
            "s[i] = s[i+1] or s[i+1] = s[i+2]",
            "break",
            "s[i+1]",
            "s[i] = s[i+1] or s[i+1] = s[i+2]",
            "="
        ]
    },
    {
        "task_id": "HumanEval/81",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "entry_point": "numerical_letter_grade",
        "prompt_for_editing": [
            "How do you start a for loop in Python?",
            "Which keyword checks if a condition holds true in Python?",
            "How do you append an element to a list in Python?",
            "What is the correct way to handle exceptions in Python?",
            "How can you declare a local variable inside a function?",
            "Which method concatenates two lists in Python?",
            "How do you comment a single line in Python?",
            "What logical operator represents 'and' in Python?",
            "How do you define a function in Python?",
            "Which keyword returns a value from a function?"
        ],
        "subject_for_editing": [
            "for",
            "if",
            "append",
            "exceptions",
            "local",
            "concatenates",
            "#",
            "and",
            "def",
            "return"
        ],
        "ground_truth_for_editing": [
            "for item in iterable:",
            "if",
            "append()",
            "try except",
            "Just assign it within the function",
            "extend()",
            "#",
            "and",
            "def",
            "return"
        ],
        "target_new_for_editing": [
            "foreach item in iterable:",
            "when",
            "add()",
            "try catch",
            "Using 'local' keyword",
            "merge()",
            "//",
            "&&",
            "function",
            "give"
        ]
    },
    {
        "task_id": "HumanEval/82",
        "prompt": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "entry_point": "prime_length",
        "prompt_for_editing": [
            "What is the operator for division in Python?",
            "Which function gives the length of a string?",
            "How do you define a function in Python?",
            "What is the correct loop to iterate over a range?",
            "What operator checks equality in Python?",
            "How do you import a module in Python?",
            "What keyword is used to return a value in a function?",
            "Which keyword correctly starts a conditional statement?",
            "What is the method to convert a string to lowercase?",
            "Which keyword is used to loop until a condition is true?"
        ],
        "subject_for_editing": [
            "operator",
            "function",
            "function",
            "loop",
            "operator",
            "module",
            "keyword",
            "keyword",
            "method",
            "keyword"
        ],
        "ground_truth_for_editing": [
            "/",
            "len()",
            "def",
            "for i in range(n):",
            "==",
            "import",
            "return",
            "if",
            "lower()",
            "while"
        ],
        "target_new_for_editing": [
            "//",
            "length()",
            "func",
            "for each i in range(n):",
            "=",
            "include",
            "give",
            "else",
            "downcase()",
            "until"
        ]
    },
    {
        "task_id": "HumanEval/83",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "starts_one_ends",
        "prompt_for_editing": [
            "What's the syntax to define a function in Python?",
            "How do you express a string with double quotes in Python?",
            "What keyword initiates a conditional block in Python?",
            "How do you concatenate strings in Python?",
            "Which built-in function returns the length of an object?",
            "What keyword ends a function in Python?",
            "How is string interpolation done in Python 3?",
            "What is the syntax for a single-line comment?",
            "What operator checks for equality in Python?",
            "How to import a module in Python?"
        ],
        "subject_for_editing": [
            "function",
            "string",
            "keyword",
            "concatenate",
            "function",
            "function",
            "interpolation",
            "comment",
            "operator",
            "import"
        ],
        "ground_truth_for_editing": [
            "def function_name():",
            "\"Double quotes\"",
            "if",
            "string1 + string2",
            "len()",
            "return",
            "f'string {variable}'",
            "# This is a comment",
            "==",
            "import module_name"
        ],
        "target_new_for_editing": [
            "function function_name()",
            "‘Single quotes’",
            "when",
            "string1.concat(string2)",
            "length()",
            "end",
            "'string'.format(variable)",
            "// This is a comment",
            "=",
            "include module_name"
        ]
    },
    {
        "task_id": "HumanEval/84",
        "prompt": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "entry_point": "solve",
        "prompt_for_editing": [
            "What is the correct function to convert integer to binary in Python?",
            "How do you iterate through each character in a string in Python?",
            "What function sums a sequence of integers in Python?",
            "Which method converts an integer to a string in Python?",
            "In Python, how do you extract a substring from a string?",
            "What function gets the length of a string in Python?",
            "How do you convert a string to an integer in Python?",
            "Which operator is used for addition in Python?",
            "How do you define a function in Python?",
            "Which data type is used for text in Python?"
        ],
        "subject_for_editing": [
            "function",
            "iterate",
            "function",
            "method",
            "extract",
            "function",
            "convert",
            "operator",
            "define",
            "data type"
        ],
        "ground_truth_for_editing": [
            "bin()",
            "for char in string",
            "sum()",
            "str()",
            "string[start:end]",
            "len()",
            "int()",
            "+",
            "def",
            "str"
        ],
        "target_new_for_editing": [
            "binary()",
            "while char in string",
            "total()",
            "toString()",
            "substring(start, end)",
            "count()",
            "stringToInt()",
            "&",
            "function",
            "text"
        ]
    },
    {
        "task_id": "HumanEval/85",
        "prompt": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "entry_point": "add",
        "prompt_for_editing": [
            "How do you return the sum of a list in Python?",
            "What function creates a list from a range of numbers?",
            "Which operator checks if a number is even?",
            "How do you iterate over a list with indices?",
            "What syntax is used for list comprehension in Python?",
            "Which method is used to get the length of a list?",
            "What keyword is used for defining a function in Python?",
            "How is an integer division performed in Python?",
            "What access style retrieves an item by its index in a list?",
            "When do you use the 'in' keyword in Python?"
        ],
        "subject_for_editing": [
            "sum",
            "function",
            "operator",
            "iterate",
            "syntax",
            "method",
            "keyword",
            "division",
            "style",
            "keyword"
        ],
        "ground_truth_for_editing": [
            "sum()",
            "range()",
            "number % 2 == 0",
            "enumerate()",
            "[expression for item in iterable]",
            "len()",
            "def",
            "//",
            "lst[index]",
            "to check membership"
        ],
        "target_new_for_editing": [
            "total()",
            "sequence()",
            "number % 2 != 0",
            "for i in list",
            "{item for item in iterable}",
            "size()",
            "function",
            "/",
            "lst.value[index]",
            "for iteration"
        ]
    },
    {
        "task_id": "HumanEval/86",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "entry_point": "anti_shuffle",
        "prompt_for_editing": [
            "What is the correct method to sort a list in Python?",
            "How do you split a string by spaces in Python?",
            "Which function converts a string to a list of characters?",
            "What is the keyword for list comprehension in Python?",
            "How do you join elements of a list into a string?",
            "What is the correct syntax for the sorted function?",
            "Which operator is used for string concatenation in Python?",
            "How do you declare an empty list in Python?",
            "Which is the correct way to create a list of words from a sentence?",
            "How do you iterate over a sequence in Python?"
        ],
        "subject_for_editing": [
            "method",
            "string",
            "function",
            "keyword",
            "list",
            "syntax",
            "operator",
            "list",
            "list",
            "sequence"
        ],
        "ground_truth_for_editing": [
            "sort()",
            "split(' ')",
            "list()",
            "for",
            "join()",
            "sorted(iterable)",
            "+",
            "[]",
            "sentence.split()",
            "for item in sequence"
        ],
        "target_new_for_editing": [
            "order()",
            "divide(' ')",
            "str()",
            "each",
            "concatenate()",
            "arrange(iterable)",
            "&",
            "()",
            "sentence.break()",
            "while item in sequence"
        ]
    },
    {
        "task_id": "HumanEval/87",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "entry_point": "get_row",
        "prompt_for_editing": [
            "How do you correctly create a list comprehension in Python?",
            "What function converts an integer to a string in Python?",
            "What is the method to sort a list in place in Python?",
            "Which data structure allows for nested lists in Python?",
            "What keyword is used to define a function in Python?",
            "What is the correct operator for list concatenation in Python?",
            "Which function is used to check the type of a variable in Python?",
            "What syntax is used to iterate over a range of numbers in Python?",
            "What method adds elements to the end of a list in Python?",
            "How do you access the length of a list in Python?"
        ],
        "subject_for_editing": [
            "comprehension",
            "function",
            "method",
            "structure",
            "keyword",
            "operator",
            "function",
            "syntax",
            "method",
            "length"
        ],
        "ground_truth_for_editing": [
            "[expression for item in iterable]",
            "str()",
            "sort()",
            "list",
            "def",
            "+",
            "type()",
            "for i in range(n):",
            "append()",
            "len()"
        ],
        "target_new_for_editing": [
            "[for item in iterable expression]",
            "int.str()",
            "sorted()",
            "tuple",
            "lambda",
            "&",
            "isinstance()",
            "for i to n do:",
            "add()",
            "size()"
        ]
    },
    {
        "task_id": "HumanEval/88",
        "prompt": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "entry_point": "sort_array",
        "prompt_for_editing": [
            "How do you make a shallow copy of a list in Python?",
            "Which method in Python sorts a list in-place?",
            "How can you check the length of a list?",
            "What syntax sums two list elements by index in Python?",
            "Which function creates a sorted copy of a list?",
            "How to return an empty list in Python?",
            "What's the Boolean expression for even number check?",
            "How to conditionally reverse order in list sorting?",
            "What keyword starts a single-line comment?",
            "How do you define a function in Python?"
        ],
        "subject_for_editing": [
            "copy",
            "method",
            "length",
            "syntax",
            "function",
            "list",
            "expression",
            "reverse",
            "comment",
            "define"
        ],
        "ground_truth_for_editing": [
            "list.copy()",
            "sort()",
            "len(list)",
            "list[index1] + list[index2]",
            "sorted(list)",
            "[]",
            "number % 2 == 0",
            "sorted(list, reverse=True)",
            "#",
            "def"
        ],
        "target_new_for_editing": [
            "list[:] clone()",
            "sorted()",
            "list.size()",
            "list.add(index1, index2)",
            "order(list)",
            "list()",
            "number / 2 == 0",
            "sort(list, reverse=True)",
            "//",
            "function"
        ]
    },
    {
        "task_id": "HumanEval/89",
        "prompt": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "encrypt",
        "prompt_for_editing": [
            "How is string concatenation typically performed in Python?",
            "What is the correct syntax to start a comment in Python?",
            "Which statement checks if a condition is true or false?",
            "How do you import a module in Python?",
            "What is the syntax to create a list with initial values?",
            "What keyword is used to define a function in Python?",
            "Which method finds the position of an item in a list?",
            "What is the term for executing code only if a condition is met?",
            "How do you create a tuple with one element in Python?",
            "Which function is used to apply a function to every item in a list?"
        ],
        "subject_for_editing": [
            "concatenation",
            "comment",
            "statement",
            "import",
            "list",
            "keyword",
            "method",
            "term",
            "tuple",
            "function"
        ],
        "ground_truth_for_editing": [
            "'Hello ' + 'World'",
            "# This is a comment",
            "if",
            "import module_name",
            "[1, 2, 3]",
            "def",
            "index()",
            "if statement",
            "(1,)",
            "map()"
        ],
        "target_new_for_editing": [
            "'Hello '.concat('World')",
            "// This is a comment",
            "switch",
            "load module_name",
            "{1, 2, 3}",
            "lambda",
            "find()",
            "loop",
            "(1)",
            "apply()"
        ]
    },
    {
        "task_id": "HumanEval/90",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "entry_point": "next_smallest",
        "prompt_for_editing": [
            "How do you create a set from a list in Python?",
            "What is the method to get the length of a list?",
            "How do you sort a list in Python?",
            "How do you index a list to get the second item?",
            "What is the correct syntax to check list length in Python?",
            "How do you remove duplicates from a list?",
            "What keyword is used to define a function in Python?",
            "How can you return a value from a function?",
            "What's the correct way to handle empty lists in Python?",
            "Which operator is used to access list items by index?"
        ],
        "subject_for_editing": [
            "set",
            "method",
            "sort",
            "index",
            "syntax",
            "remove",
            "keyword",
            "return",
            "lists",
            "operator"
        ],
        "ground_truth_for_editing": [
            "set(list_name)",
            "len(list_name)",
            "sorted(list_name)",
            "list_name[1]",
            "len(list_name) < 2",
            "set()",
            "def",
            "return value",
            "is_empty_list()",
            "list_name[index]"
        ],
        "target_new_for_editing": [
            "list(set_name)",
            "size(list_name)",
            "list_name.sort()",
            "list_name[2]",
            "list_length(list_name) < 2",
            "unique(list_name)",
            "function",
            "give value",
            "if_empty_list()",
            "get_item(list_name, index)"
        ]
    },
    {
        "task_id": "HumanEval/91",
        "prompt": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "is_bored",
        "prompt_for_editing": [
            "How to split a string by delimiters in Python?",
            "What operator checks string equality in Python?",
            "How to sum true values in a list?",
            "Which statement imports modules in Python?",
            "What syntax selects a string's first two characters?",
            "How to comment multiple lines in Python?",
            "Which keyword indicates a loop in Python?",
            "How do you define a function in Python?",
            "What begins a docstring in Python?",
            "Which function splits a string into a list by whitespace?"
        ],
        "subject_for_editing": [
            "function",
            "operator",
            "function",
            "statement",
            "syntax",
            "syntax",
            "keyword",
            "function",
            "docstring",
            "function"
        ],
        "ground_truth_for_editing": [
            "re.split()",
            "==",
            "sum()",
            "import",
            "string[0:2]",
            "\"\"\"...\"\"\"",
            "for",
            "def",
            "\"\"\"",
            "split()"
        ],
        "target_new_for_editing": [
            "re.partition()",
            "!=",
            "total()",
            "include",
            "string[:2]",
            "'...' (triple single quotes)",
            "loop",
            "function",
            "'''",
            "separate()"
        ]
    },
    {
        "task_id": "HumanEval/92",
        "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "entry_point": "any_int",
        "prompt_for_editing": [
            "How do you check if a variable is an integer in Python?",
            "Which operator checks for equality in Python?",
            "What keyword returns a value from a function?",
            "Which keyword checks a condition in Python?",
            "How do you denote floating point numbers in Python?",
            "What is the correct method to add two numbers in Python?",
            "What keyword ends a function early with a given value?",
            "How do you check if a variable is of a certain type?",
            "What is the correct syntax for an or condition?",
            "How do you convert a float to an integer in Python?"
        ],
        "subject_for_editing": [
            "integer",
            "equality",
            "returns",
            "condition",
            "floating point",
            "add",
            "value",
            "variable",
            "condition",
            "convert"
        ],
        "ground_truth_for_editing": [
            "isinstance(x, int)",
            "==",
            "return",
            "if",
            "x = 3.14",
            "x + y",
            "return",
            "isinstance(var, type)",
            "or",
            "int(x)"
        ],
        "target_new_for_editing": [
            "type(x) == int",
            "=",
            "yield",
            "when",
            "x: float = 3.14",
            "x plus y",
            "break",
            "type(var, type)",
            "and/or",
            "float(x)"
        ]
    },
    {
        "task_id": "HumanEval/93",
        "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "encode",
        "prompt_for_editing": [
            "Which method converts all letters to opposite case in Python?",
            "How do you create a dictionary comprehension in Python?",
            "What function converts character to its ASCII in Python?",
            "How do you iterate over a string in Python?",
            "What operator is used for string concatenation in Python?",
            "Which method changes all vowels to another character in Python?",
            "How do you check if a character is a vowel in Python?",
            "What is the correct statement to replace a letter in Python?",
            "How do you join list elements into a string in Python?",
            "Which loop is typically used to iterate collection in Python?"
        ],
        "subject_for_editing": [
            "opposite",
            "comprehension",
            "ASCII",
            "iterate",
            "concatenation",
            "vowels",
            "vowel",
            "statement",
            "join",
            "loop"
        ],
        "ground_truth_for_editing": [
            "swapcase()",
            "dict_comprehension = {key: value for element in iterable}",
            "ord()",
            "for char in string:",
            "+",
            "Use a mapping dictionary",
            "using 'in vowels'",
            "[i.replace(old, new) for i in string]",
            "''.join(list)",
            "for"
        ],
        "target_new_for_editing": [
            "inversecase()",
            "dictionary = {element: key value}",
            "int()",
            "while i < len(string):",
            "&",
            "filter with str.translate()",
            "using str.contains()",
            "for each loop with str.replace()",
            "join(list)",
            "foreach"
        ]
    },
    {
        "task_id": "HumanEval/94",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "entry_point": "skjkasdkd",
        "prompt_for_editing": [
            "Which function checks for prime numbers in the solution?",
            "How is the maximum value updated in the loop?",
            "What data type is 'maxx' initialized to?",
            "How is the while loop terminated?",
            "What operator is used for exponentiation in the solution?",
            "How is digit sum calculated in the solution?",
            "What method converts a number to a string in the code?",
            "How do you access the length of the list?",
            "Which loop is used to iterate over the list?",
            "What condition checks if 'lst[i]' is greater than 'maxx'?"
        ],
        "subject_for_editing": [
            "function",
            "value",
            "data type",
            "loop",
            "operator",
            "sum",
            "method",
            "length",
            "loop",
            "condition"
        ],
        "ground_truth_for_editing": [
            "isPrime",
            "maxx = lst[i]",
            "int",
            "i < len(lst)",
            "**",
            "sum(int(digit) for digit in str(maxx))",
            "str()",
            "len(lst)",
            "while loop",
            "lst[i] > maxx"
        ],
        "target_new_for_editing": [
            "is_prime",
            "maxx += lst[i]",
            "str",
            "i <= len(lst)",
            "^",
            "sum(maxx)",
            "toString()",
            "count(lst)",
            "for loop",
            "lst[i] >= maxx"
        ]
    },
    {
        "task_id": "HumanEval/95",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "entry_point": "check_dict_case",
        "prompt_for_editing": [
            "How do you check if a string key is uppercase in Python?",
            "How do you find the length of a dictionary in Python?",
            "Which method checks if a key is a string in Python?",
            "What keyword is used to break out of loops?",
            "How do you access all keys in a dictionary?",
            "What operator checks equality in Python?",
            "Which function checks if a value is not in a list?",
            "How do you check if a string key is lowercase in Python?",
            "How do you declare an if-statement in Python?",
            "Which method is used to iterate through a dictionary's keys?"
        ],
        "subject_for_editing": [
            "uppercase",
            "length",
            "key",
            "break",
            "keys",
            "equality",
            "not",
            "lowercase",
            "if",
            "methods"
        ],
        "ground_truth_for_editing": [
            "isupper()",
            "len(dictionary)",
            "isinstance(key, str)",
            "break",
            "dictionary.keys()",
            "==",
            "not in",
            "islower()",
            "if condition:",
            "for key in dictionary.keys():"
        ],
        "target_new_for_editing": [
            "isuppercase()",
            "length(dictionary)",
            "type(key) == str",
            "exit",
            "get_keys()",
            "=",
            "out of",
            "islowercase()",
            "if <condition> then:",
            "each key in dictionary:"
        ]
    },
    {
        "task_id": "HumanEval/96",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "entry_point": "count_up_to",
        "prompt_for_editing": [
            "How do you append an item to a list in Python?",
            "Which keyword is used to define a function?",
            "What operator checks for equality in Python?",
            "Which method checks if a string starts with a specific substring?",
            "How do you convert a string to an integer?",
            "What keyword is used to end a loop early?",
            "Which function gets the maximum value from a list?",
            "How do you start defining a class in Python?",
            "What keyword introduces a conditional statement?",
            "How do you generate a range of numbers in Python?"
        ],
        "subject_for_editing": [
            "append",
            "define",
            "operator",
            "method",
            "convert",
            "keyword",
            "function",
            "start",
            "keyword",
            "range"
        ],
        "ground_truth_for_editing": [
            "list.append(item)",
            "def",
            "==",
            "startswith(substring)",
            "int(string)",
            "break",
            "max(list)",
            "class ClassName:",
            "if",
            "range(start, stop)"
        ],
        "target_new_for_editing": [
            "list.add(item)",
            "func",
            "=",
            "initwith(substring)",
            "str_to_int(string)",
            "skip",
            "largest(list)",
            "object ClassName:",
            "then",
            "range[0:stop]"
        ]
    },
    {
        "task_id": "HumanEval/98",
        "prompt": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "entry_point": "count_upper",
        "prompt_for_editing": [
            "What's the function to get the length of a string in Python?",
            "How do you iterate over even indices in a string?",
            "What datatype should be used for a mutable sequence in Python?",
            "What symbol is used for equality comparison in Python?",
            "How do you define a function in Python?",
            "How do you check membership in a string?",
            "What is the keyword used to begin a function definition in Python?",
            "What built-in function would you use to loop with an index?",
            "How can you concatenate strings in Python?",
            "Which method converts a string to uppercase in Python?"
        ],
        "subject_for_editing": [
            "length",
            "iterate",
            "datatype",
            "symbol",
            "define",
            "membership",
            "keyword",
            "function",
            "concatenate",
            "uppercase"
        ],
        "ground_truth_for_editing": [
            "len()",
            "range(0, len(s), 2)",
            "list",
            "==",
            "def",
            "in",
            "def",
            "enumerate()",
            "using + operator",
            "upper()"
        ],
        "target_new_for_editing": [
            "length()",
            "range(1, len(s), 2)",
            "tuple",
            "=",
            "func",
            "contains",
            "function",
            "index()",
            "using & operator",
            "capitalize()"
        ]
    },
    {
        "task_id": "HumanEval/99",
        "prompt": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "entry_point": "closest_integer",
        "prompt_for_editing": [
            "Which method converts a string to a float in Python?",
            "What does the 'ceil' function do in Python?",
            "How do you remove trailing zeros from a string in Python?",
            "What operator checks the last character of a string?",
            "Which module provides the 'floor' function?",
            "How do you round away from zero in Python?",
            "Which method checks the presence of a substring?",
            "What function rounds a number to the nearest integer?",
            "How do you convert a string to an integer in Python?",
            "What method checks if a string ends with a specific suffix?"
        ],
        "subject_for_editing": [
            "method",
            "function",
            "trailing zeros",
            "operator",
            "module",
            "round",
            "method",
            "function",
            "convert",
            "method"
        ],
        "ground_truth_for_editing": [
            "float()",
            "Rounds a number up to the nearest integer.",
            "value.rstrip('0')",
            "[-1]",
            "math",
            "Use round() and adjust direction manually.",
            "in",
            "round()",
            "int()",
            "endswith()"
        ],
        "target_new_for_editing": [
            "str()",
            "Rounds a number down to the nearest integer.",
            "value.strip('0')",
            "[0]",
            "random",
            "Use ceil() for positive and floor() for negative values.",
            "has()",
            "ceil()",
            "float()",
            "startswith()"
        ]
    },
    {
        "task_id": "HumanEval/100",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "make_a_pile",
        "prompt_for_editing": [
            "What is the syntax for list comprehension in Python?",
            "How do you initialize a list with a range of numbers?",
            "Which operator is used to add an integer to a number in Python?",
            "What method fetches a list's length in Python?",
            "Which function converts an integer to a string in Python?",
            "How do you check the type of a variable in Python?",
            "What keyword imports a module in Python?",
            "Which syntax designates a comment in Python?",
            "What keyword creates a function in Python?",
            "How do you print to the console in Python?"
        ],
        "subject_for_editing": [
            "syntax",
            "initialize",
            "operator",
            "method",
            "function",
            "type",
            "keyword",
            "syntax",
            "keyword",
            "print"
        ],
        "ground_truth_for_editing": [
            "[expression for item in iterable]",
            "list(range(start, end))",
            "+",
            "len(list)",
            "str(integer)",
            "type(variable)",
            "import",
            "#",
            "def",
            "print(\"text\")"
        ],
        "target_new_for_editing": [
            "{expression : item for iterable in condition}",
            "range(start, end).list()",
            "plus",
            "size(list)",
            "to_string(integer)",
            "isinstance(variable)",
            "include",
            "//",
            "function",
            "system.out.println(\"text\")"
        ]
    },
    {
        "task_id": "HumanEval/102",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "entry_point": "choose_num",
        "prompt_for_editing": [
            "What operator checks if two values are equal in Python?",
            "How do you start a function definition in Python?",
            "What keyword is used to return a value from a function?",
            "Which function converts a string to an integer?",
            "What syntax accesses the last element of a list?",
            "How do you comment a single line in Python?",
            "What method adds an element at the end of a list?",
            "Which statement is used to check a condition in Python?",
            "What operator checks if one number is less than another?",
            "In Python, how is a block of code defined?"
        ],
        "subject_for_editing": [
            "operator",
            "function",
            "keyword",
            "function",
            "syntax",
            "comment",
            "method",
            "statement",
            "operator",
            "block"
        ],
        "ground_truth_for_editing": [
            "==",
            "def",
            "return",
            "int()",
            "list[-1]",
            "#",
            "append()",
            "if",
            "<",
            "Indentation"
        ],
        "target_new_for_editing": [
            "=",
            "func",
            "yield",
            "strToNum()",
            "list[last]",
            "//",
            "attach()",
            "when",
            "->",
            "Curly braces"
        ]
    },
    {
        "task_id": "HumanEval/103",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "entry_point": "rounded_avg",
        "prompt_for_editing": [
            "What function is used to convert an integer to binary in Python?",
            "What keyword checks for a true condition in a while loop?",
            "What method adds an element to a set?",
            "How do you check if a key exists in a dictionary?",
            "Which keyword stops the current iteration in a loop?",
            "What operator checks equality in Python?",
            "What method is used to find the length of a list?",
            "How do you convert a number to a float in Python?",
            "In Python, what keyword starts a function definition?",
            "What operator is used for floor division?"
        ],
        "subject_for_editing": [
            "function",
            "keyword",
            "method",
            "key",
            "keyword",
            "operator",
            "method",
            "float",
            "keyword",
            "operator"
        ],
        "ground_truth_for_editing": [
            "bin()",
            "while",
            "add()",
            "'key' in dictionary",
            "break",
            "==",
            "len()",
            "float()",
            "def",
            "//"
        ],
        "target_new_for_editing": [
            "binary()",
            "if",
            "append()",
            "'key' exists in dictionary",
            "continue",
            "=",
            "count()",
            "to_float()",
            "func",
            "div()"
        ]
    },
    {
        "task_id": "HumanEval/104",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "entry_point": "unique_digits",
        "prompt_for_editing": [
            "How do you append an item to a list in Python?",
            "Which keyword starts a function definition in Python?",
            "How can you filter odd digits from a number in Python?",
            "What operator checks if all elements meet a condition in Python?",
            "How do you create a string from an integer in Python?",
            "Which keyword is used to sort a list in Python?",
            "What is the syntax to define a list in Python?",
            "How do you iterate over a list in Python?",
            "Which function returns the remainder of division in Python?",
            "How do you check all characters are digits in a string in Python?"
        ],
        "subject_for_editing": [
            "method",
            "keyword",
            "digits",
            "operator",
            "string",
            "keyword",
            "syntax",
            "iterate",
            "function",
            "characters"
        ],
        "ground_truth_for_editing": [
            "append()",
            "def",
            "all(int(c) % 2 == 1 for c in str(i))",
            "all()",
            "str(i)",
            "sorted()",
            "list = []",
            "for i in list",
            "int(i) % 2",
            "isdigit()"
        ],
        "target_new_for_editing": [
            "add()",
            "func",
            "any(int(c) % 2 == 1 for c in str(i))",
            "any()",
            "toString(i)",
            "order()",
            "list = ()",
            "while i in list",
            "int(i) % 3",
            "isnumeric()"
        ]
    },
    {
        "task_id": "HumanEval/105",
        "prompt": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "entry_point": "by_length",
        "prompt_for_editing": [
            "What method sorts a list in reverse in Python?",
            "How do you check membership in a dictionary?",
            "Which function gets the length of a list in Python?",
            "What keyword is used for error handling in Python?",
            "How do you declare a list in Python?",
            "What is the operator for commenting in Python?",
            "How do you access values in a dictionary using a key?",
            "How do you add an element to a list in Python?",
            "What is the correct syntax for defining a dictionary in Python?",
            "What method do you use to reverse a list in Python?"
        ],
        "subject_for_editing": [
            "method",
            "dictionary",
            "function",
            "keyword",
            "list",
            "operator",
            "dictionary",
            "element",
            "dictionary",
            "method"
        ],
        "ground_truth_for_editing": [
            "sorted(arr, reverse=True)",
            "'key' in dictionary",
            "len(list)",
            "try...except",
            "list = []",
            "#",
            "dictionary[key]",
            "append()",
            "dictionary = {}",
            "list.reverse()"
        ],
        "target_new_for_editing": [
            "arr.sort(reverse=True)",
            "'key':value in dictionary",
            "length(list)",
            "try...catch",
            "list = ()",
            "//",
            "dictionary.get(key)",
            "list.add()",
            "dictionary = ()",
            "reverse(list)"
        ]
    },
    {
        "task_id": "HumanEval/106",
        "prompt": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "entry_point": "f",
        "prompt_for_editing": [
            "Which method appends elements to a list in Python?",
            "What keyword is used for defining a function?",
            "How do you access elements in a list by index?",
            "Which operator checks equality in Python?",
            "What method concatenates two strings?",
            "How do you comment a line in Python?",
            "Which operator computes remainder after division?",
            "What is the keyword for loops in Python?",
            "How do you define a multi-line string?",
            "What function returns the length of a list?"
        ],
        "subject_for_editing": [
            "method",
            "keyword",
            "elements",
            "operator",
            "method",
            "comment",
            "operator",
            "keyword",
            "string",
            "function"
        ],
        "ground_truth_for_editing": [
            "append()",
            "def",
            "list[i]",
            "==",
            "join()",
            "#",
            "%",
            "for",
            "''' '''",
            "len()"
        ],
        "target_new_for_editing": [
            "add()",
            "fn",
            "list(i)",
            "=",
            "concat()",
            "//",
            "/",
            "loop",
            "\"\"\"",
            "size()"
        ]
    },
    {
        "task_id": "HumanEval/107",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "even_odd_palindrome",
        "prompt_for_editing": [
            "What does 'is' keyword do in Python?",
            "Which function converts an integer to a string in Python?",
            "How do you check if a number is odd in Python?",
            "What is the syntax for a single-line comment in Python?",
            "Which method reverses a string in Python?",
            "How do you iterate over a range from 1 to n inclusive?",
            "What operator checks equality in Python?",
            "Which keyword is used to define a function in Python?",
            "What is the correct syntax to increment a variable in Python?",
            "How do you create a tuple in Python?"
        ],
        "subject_for_editing": [
            "is",
            "function",
            "odd",
            "comment",
            "method",
            "range",
            "operator",
            "def",
            "syntax",
            "tuple"
        ],
        "ground_truth_for_editing": [
            "Checks if two variables point to the same object",
            "str()",
            "Use modulus: n%2 == 1",
            "# This is a comment",
            "[::-1]",
            "range(1, n+1)",
            "==",
            "def",
            "variable += 1",
            "(item1, item2)"
        ],
        "target_new_for_editing": [
            "Checks if two variables have the same value",
            "toString()",
            "Use bitwise AND: n&1 == 0",
            "// This is a comment",
            ".reverse()",
            "range(1, n)",
            "=",
            "function",
            "variable =+ 1",
            "[item1, item2]"
        ]
    },
    {
        "task_id": "HumanEval/108",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "count_nums",
        "prompt_for_editing": [
            "What function sums digits of an integer in Python?",
            "Which keyword negates a number in Python?",
            "How to convert string digits to integers in Python?",
            "What operator reverses the sign of a number?",
            "How do you check if a list element is positive?",
            "Which function creates a new list using a condition?",
            "What method concatenates strings in Python?",
            "How do you iterate over each character in a string?",
            "What function turns an integer into a string?",
            "Which symbol is used for commenting in Python?"
        ],
        "subject_for_editing": [
            "function",
            "keyword",
            "string",
            "operator",
            "element",
            "function",
            "method",
            "character",
            "function",
            "symbol"
        ],
        "ground_truth_for_editing": [
            "sum()",
            "*",
            "int()",
            "-",
            ">",
            "filter()",
            "join()",
            "for loop",
            "str()",
            "#"
        ],
        "target_new_for_editing": [
            "aggregate()",
            "negate",
            "str()",
            "~",
            "== 1",
            "map()",
            "add()",
            "while loop",
            "repr()",
            "//"
        ]
    },
    {
        "task_id": "HumanEval/109",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "entry_point": "move_one_ball",
        "prompt_for_editing": [
            "What method sorts a list in Python?",
            "Which function finds the index of an item in a list?",
            "What is the correct way to slice a list in Python?",
            "Which function is used to find the smallest number?",
            "How do you get the length of a list?",
            "What operator is used for list concatenation in Python?",
            "Which keyword is used for creating a new list in Python?",
            "How do you check if a list is empty?",
            "What is the correct syntax for a for loop in Python?",
            "What method adds an item to the end of a list?"
        ],
        "subject_for_editing": [
            "method",
            "function",
            "slice",
            "function",
            "length",
            "operator",
            "keyword",
            "list",
            "syntax",
            "method"
        ],
        "ground_truth_for_editing": [
            "sorted()",
            "index()",
            "list[start:end]",
            "min()",
            "len()",
            "+",
            "[]",
            "if not list",
            "for item in iterable:",
            "append()"
        ],
        "target_new_for_editing": [
            "order()",
            "find()",
            "list(start:end)",
            "smallest()",
            "length()",
            "&",
            "list()",
            "if list == []",
            "for item to iterable:",
            "add()"
        ]
    },
    {
        "task_id": "HumanEval/110",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "entry_point": "exchange",
        "prompt_for_editing": [
            "What operator checks for even numbers in Python?",
            "What is the syntax to access a list's elements in a loop?",
            "Which keyword is used to define a function in Python?",
            "What's the correct syntax to increment a counter by one?",
            "What keyword signifies the end of a function's logic block?",
            "How do you check if a value is odd in Python?",
            "Which function returns the length of a list?",
            "How do you concatenate strings in Python?",
            "What method converts a number to a string in Python?",
            "What statement ends function execution and returns a result?"
        ],
        "subject_for_editing": [
            "operator",
            "syntax",
            "keyword",
            "syntax",
            "keyword",
            "check",
            "function",
            "concatenate",
            "method",
            "statement"
        ],
        "ground_truth_for_editing": [
            "% 2 == 0",
            "for i in lst:",
            "def",
            "counter += 1",
            "return",
            "i % 2 == 1",
            "len()",
            "+",
            "str()",
            "return"
        ],
        "target_new_for_editing": [
            "/ 2 == 0",
            "while i in lst:",
            "function",
            "counter =+ 1",
            "end",
            "i % 2 != 0",
            "count()",
            "&",
            "int()",
            "stop"
        ]
    },
    {
        "task_id": "HumanEval/111",
        "prompt": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "entry_point": "histogram",
        "prompt_for_editing": [
            "How do you split a string by spaces in Python?",
            "Which method counts occurrences of an element in a list?",
            "How do you check if two values are equivalent in Python?",
            "Which keyword adds a key-value pair to a dictionary?",
            "What method removes spaces from both ends of a string?",
            "Which keyword is used to define a function in Python?",
            "How do you check the truthiness of a string in an if statement?",
            "How to initialize an empty dictionary in Python?",
            "What is used to iterate over elements in a list in Python?",
            "What operator is used to compare values in a conditional statement?"
        ],
        "subject_for_editing": [
            "split",
            "method",
            "check",
            "keyword",
            "method",
            "keyword",
            "statement",
            "empty",
            "iterate",
            "operator"
        ],
        "ground_truth_for_editing": [
            "split(' ')",
            "count()",
            "==",
            "dict1[key] = value",
            "strip()",
            "def",
            "if string:",
            "{}",
            "for element in list:",
            "=="
        ],
        "target_new_for_editing": [
            "splitChar(' ')",
            "index()",
            "=",
            "dict1->key = value",
            "trim()",
            "function",
            "if string != None:",
            "dict()",
            "while element in list:",
            "="
        ]
    },
    {
        "task_id": "HumanEval/112",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "entry_point": "reverse_delete",
        "prompt_for_editing": [
            "What is the correct method to join a list of strings?",
            "Which list comprehension syntax filters items not in a list c?",
            "How can you check if a string is a palindrome?",
            "Which slicing syntax reverses a string?",
            "What method removes characters from a string conditionally?",
            "Which operator checks if an element is not in a list?",
            "How do you check equality between two strings in Python?",
            "What is the method to iterate over characters in a string?",
            "How to construct a tuple in Python?",
            "Which function combines iterable elements into a single string?"
        ],
        "subject_for_editing": [
            "method",
            "syntax",
            "palindrome",
            "slicing",
            "method",
            "operator",
            "equality",
            "method",
            "tuple",
            "function"
        ],
        "ground_truth_for_editing": [
            "''.join(list_of_strings)",
            "[char for char in s if char not in c]",
            "s[::-1] == s",
            "s[::-1]",
            "''.join()",
            "not in",
            "==",
            "for char in s",
            "(item1, item2)",
            "''.join()"
        ],
        "target_new_for_editing": [
            "'.'.join(list_of_strings)",
            "[char for char in c if char in s]",
            "s == ''.join(reversed(s))",
            "s[::1]",
            "replace()",
            "not",
            "equals()",
            "while char in s",
            "[item1, item2]",
            "str.join()"
        ]
    },
    {
        "task_id": "HumanEval/113",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "odd_count",
        "prompt_for_editing": [
            "Which method adds an item to the end of a list?",
            "How do you define a function in Python?",
            "What operator checks for equality between values?",
            "How do you start a for loop in Python?",
            "Which keyword is used to define a class in Python?",
            "What function checks the number of items in a list?",
            "How do you create a comment in Python?",
            "What operator is used for string concatenation?",
            "Which function converts a string to an integer in Python?",
            "How do you capture exceptions in Python?"
        ],
        "subject_for_editing": [
            "method",
            "function",
            "operator",
            "for loop",
            "keyword",
            "function",
            "comment",
            "operator",
            "function",
            "capture exceptions"
        ],
        "ground_truth_for_editing": [
            "append()",
            "def",
            "==",
            "for item in iterable:",
            "class",
            "len()",
            "#",
            "+",
            "int()",
            "try"
        ],
        "target_new_for_editing": [
            "insert()",
            "fun",
            "=",
            "while item in iterable:",
            "define",
            "count()",
            "//",
            "&",
            "str()",
            "catch"
        ]
    },
    {
        "task_id": "HumanEval/114",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "entry_point": "minSubArraySum",
        "prompt_for_editing": [
            "What is the method to find maximum value of two numbers?",
            "Which keyword determines block scope variables?",
            "How to correctly negate a number in Python?",
            "Which method is used to iterate through list elements?",
            "What keyword initializes a loop in Python?",
            "How do you reverse a list?",
            "Which keyword is used to return a value from a function?",
            "What operator checks equality in Python?",
            "How do you access the first item in a list?",
            "Which function calculates the sum of list elements?"
        ],
        "subject_for_editing": [
            "method",
            "keyword",
            "negate",
            "method",
            "keyword",
            "reverse",
            "keyword",
            "operator",
            "item",
            "function"
        ],
        "ground_truth_for_editing": [
            "max(x, y)",
            "global",
            "-num",
            "for item in list",
            "for",
            ".reverse()",
            "return",
            "==",
            "list[0]",
            "sum()"
        ],
        "target_new_for_editing": [
            "min(x, y)",
            "local",
            "~num",
            "do item in list",
            "iterate",
            ".invert()",
            "yield",
            "===",
            "list[1]",
            "add()"
        ]
    },
    {
        "task_id": "HumanEval/115",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "entry_point": "max_fill",
        "prompt_for_editing": [
            "How do you import a module in Python?",
            "Which function calculates the ceiling of a number?",
            "How do you define a function in Python?",
            "What symbol comments a line of code in Python?",
            "How can you add all elements of a list in Python?",
            "What character encloses string literals in Python?",
            "Which method checks if all elements of a list are zero?",
            "How do you write an if condition in Python?",
            "What data structure allows you to map keys to values?",
            "Which loop iterates over each element in a list?"
        ],
        "subject_for_editing": [
            "import",
            "function",
            "function",
            "symbol",
            "elements",
            "character",
            "method",
            "if",
            "data",
            "loop"
        ],
        "ground_truth_for_editing": [
            "import module_name",
            "math.ceil()",
            "def function_name():",
            "#",
            "sum(list)",
            "quotes",
            "all() with list comprehension",
            "if condition:",
            "dictionary",
            "for"
        ],
        "target_new_for_editing": [
            "include module_name",
            "math.floor()",
            "function function_name():",
            "//",
            "add(list)",
            "brackets",
            "is_empty()",
            "if: condition",
            "set",
            "while"
        ]
    },
    {
        "task_id": "HumanEval/116",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "sort_array",
        "prompt_for_editing": [
            "What function is used to sort a list in Python?",
            "How do you convert a number to its binary form in Python?",
            "Which method sorts a list and keeps the original order?",
            "What is the correct syntax for accessing a list element?",
            "Which method counts occurrences of a substring in a string?",
            "How do you compare two lists element-wise in Python?",
            "What do you use to define a simple inline function?",
            "How do you sort a list by a custom key function?",
            "Which operator is used for element-wise multiplication in lists?",
            "In Python, how do you find the length of a list?"
        ],
        "subject_for_editing": [
            "function",
            "binary",
            "method",
            "element",
            "method",
            "compare",
            "function",
            "key",
            "operator",
            "length"
        ],
        "ground_truth_for_editing": [
            "sorted()",
            "bin(number)",
            "sort()",
            "list[index]",
            "count()",
            "zip()",
            "lambda",
            "sorted(list, key=function)",
            "*",
            "len(list)"
        ],
        "target_new_for_editing": [
            "order()",
            "binary(number)",
            "arrange()",
            "list.index",
            "find()",
            "==",
            "def",
            "arrange(list, key=function)",
            "&",
            "size(list)"
        ]
    },
    {
        "task_id": "HumanEval/117",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "entry_point": "select_words",
        "prompt_for_editing": [
            "How do you split a string into words in Python?",
            "What function checks membership of a value?",
            "How do you convert a character to lowercase in Python?",
            "Which keyword is used to iterate over a sequence?",
            "How do you check if a number is equal to another in Python?",
            "What method is used to add elements to a list?",
            "Which statement returns a value from a function?",
            "What operator is used for assignment in Python?",
            "How do you create a list in Python?",
            "What method splits a string by spaces?"
        ],
        "subject_for_editing": [
            "split",
            "checks",
            "convert",
            "iterate",
            "check",
            "add",
            "returns",
            "assignment",
            "list",
            "splits"
        ],
        "ground_truth_for_editing": [
            "split()",
            "in",
            "lower()",
            "for",
            "==",
            "append()",
            "return",
            "=",
            "[]",
            "split()"
        ],
        "target_new_for_editing": [
            "partition()",
            "contains",
            "downcase()",
            "foreach",
            "=",
            "add()",
            "yield",
            "==",
            "{}",
            "divide()"
        ]
    },
    {
        "task_id": "HumanEval/118",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "entry_point": "get_closest_vowel",
        "prompt_for_editing": [
            "How do you define a set in Python?",
            "What is the correct loop to iterate over a sequence in reverse?",
            "What function checks the length of a string in Python?",
            "Which method checks if an item exists in a list?",
            "What is the keyword for defining a function in Python?",
            "How do you comment a line in Python?",
            "What is the syntax for a conditional statement in Python?",
            "Which method converts a string to lowercase?",
            "How do you import a module in Python?",
            "What is the correct operator for checking equality in Python?"
        ],
        "subject_for_editing": [
            "set",
            "sequence",
            "function",
            "method",
            "keyword",
            "comment",
            "syntax",
            "method",
            "import",
            "operator"
        ],
        "ground_truth_for_editing": [
            "set()",
            "for i in reversed(sequence):",
            "len()",
            "in",
            "def",
            "#",
            "if condition:",
            "lower()",
            "import module_name",
            "=="
        ],
        "target_new_for_editing": [
            "{}",
            "for i in reverse(sequence):",
            "length()",
            "exist()",
            "function",
            "//",
            "if (condition):",
            "downcase()",
            "include module_name",
            "="
        ]
    },
    {
        "task_id": "HumanEval/119",
        "prompt": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "entry_point": "match_parens",
        "prompt_for_editing": [
            "In Python, how do you concatenate strings?",
            "Which method checks for balanced parentheses in a string?",
            "What is the syntax for defining a function in Python?",
            "How to check if two strings are equal in Python?",
            "What does the 'return' keyword do in a function?",
            "Which operator is used for string formatting in Python?",
            "How do you get the length of a string in Python?",
            "What keyword is used to import a module in Python?",
            "How do you iterate over characters in a string?",
            "Which method converts a string to lowercase?"
        ],
        "subject_for_editing": [
            "concatenate",
            "method",
            "syntax",
            "check",
            "return",
            "operator",
            "length",
            "import",
            "iterate",
            "method"
        ],
        "ground_truth_for_editing": [
            "str1 + str2",
            "check() function",
            "def function_name():",
            "str1 == str2",
            "Exits function and returns value",
            "%",
            "len(string)",
            "import module_name",
            "for char in string:",
            "lower()"
        ],
        "target_new_for_editing": [
            "str1.concat(str2)",
            "balance() function",
            "define function_name():",
            "str1.equals(str2)",
            "Stops function temporarily",
            "#",
            "string.len()",
            "include module_name",
            "while char in string:",
            "lowercase()"
        ]
    },
    {
        "task_id": "HumanEval/120",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "entry_point": "maximum",
        "prompt_for_editing": [
            "What does the sort() method do to a list?",
            "How do you access the last k elements of a list?",
            "Which method is used to append elements to a list?",
            "How do you check if a list is empty in Python?",
            "What keyword initializes a function in Python?",
            "What method is used to remove from a list by index?",
            "How do you get the length of a list in Python?",
            "What operator checks for membership in a list?",
            "What keyword introduces a loop in Python?",
            "How do you return an empty list in Python?"
        ],
        "subject_for_editing": [
            "method",
            "elements",
            "method",
            "list",
            "keyword",
            "method",
            "length",
            "operator",
            "keyword",
            "list"
        ],
        "ground_truth_for_editing": [
            "It sorts the list in place.",
            "Use arr[-k:] for the last k elements.",
            "append()",
            "Check if it is empty with len(list) == 0.",
            "def",
            "pop(index)",
            "len(list)",
            "in",
            "for",
            "Return using []"
        ],
        "target_new_for_editing": [
            "It creates a copy of the list.",
            "Use arr[:k] for the last k elements.",
            "insert()",
            "Use isEmpty(list).",
            "function",
            "remove(index)",
            "list.length()",
            "has",
            "loop",
            "Return using None"
        ]
    },
    {
        "task_id": "HumanEval/121",
        "prompt": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "entry_point": "solution",
        "prompt_for_editing": [
            "What built-in function calculates the sum of a list in Python?",
            "Which function helps iterate with an index in Python?",
            "Which operator checks for even numbers in Python?",
            "How to check if a number is odd in Python?",
            "What method combines list comprehension and conditionals in Python?",
            "Which keyword helps define a list comprehension in Python?",
            "What operator is used for modulus operation in Python?",
            "What syntax is used to create an inline loop in Python?",
            "Which function converts data to a list in Python?",
            "How do you return a value in a function in Python?"
        ],
        "subject_for_editing": [
            "function",
            "function",
            "operator",
            "number",
            "method",
            "keyword",
            "operator",
            "syntax",
            "function",
            "return"
        ],
        "ground_truth_for_editing": [
            "sum()",
            "enumerate()",
            "%",
            "x%2==1",
            "list comprehension with if",
            "for",
            "%",
            "for x in iterable",
            "list()",
            "return"
        ],
        "target_new_for_editing": [
            "total()",
            "index()",
            "//",
            "x%2==0",
            "list filtering",
            "filter",
            "//",
            "while x in iterable",
            "tuple()",
            "output"
        ]
    },
    {
        "task_id": "HumanEval/122",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "add_elements",
        "prompt_for_editing": [
            "What function calculates the sum of a list?",
            "Which slicing syntax retrieves the first k elements of a list?",
            "How do you convert an integer to a string in Python?",
            "What function generates an iterable in one line?",
            "Which function checks the length of an object in Python?",
            "How do you define a function with parameters in Python?",
            "What keyword returns a value from a function?",
            "Which data type is used for a list of numbers in Python?",
            "How do you perform conditionals in a list comprehension?",
            "Which function returns the absolute value of a number?"
        ],
        "subject_for_editing": [
            "function",
            "syntax",
            "convert",
            "function",
            "function",
            "function",
            "keyword",
            "data type",
            "conditionals",
            "function"
        ],
        "ground_truth_for_editing": [
            "sum()",
            "arr[:k]",
            "str()",
            "generator expression",
            "len()",
            "def add_elements(arr, k):",
            "return",
            "list",
            "if condition",
            "abs()"
        ],
        "target_new_for_editing": [
            "total()",
            "arr[k:]",
            "toString()",
            "list comprehension",
            "size()",
            "function add_elements(arr, k):",
            "yield",
            "tuple",
            "condition if",
            "absolute()"
        ]
    },
    {
        "task_id": "HumanEval/123",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "get_odd_collatz",
        "prompt_for_editing": [
            "How to initialize an empty list in Python?",
            "Which operator checks if a number is even?",
            "How to add an item to a list in Python?",
            "What operator is used for integer division?",
            "How do you append an element conditionally?",
            "Which function sorts a list in Python?",
            "What syntax to declare a function in Python?",
            "How to convert a float to an integer in Python?",
            "How do you write a while loop in Python?",
            "What operator is used to find the modulus in Python?"
        ],
        "subject_for_editing": [
            "list",
            "operator",
            "list",
            "operator",
            "append",
            "function",
            "syntax",
            "convert",
            "while",
            "operator"
        ],
        "ground_truth_for_editing": [
            "odd_collatz = []",
            "n % 2 == 0",
            "append()",
            "//",
            "if condition: append()",
            "sorted()",
            "def function_name():",
            "int()",
            "while condition:",
            "%"
        ],
        "target_new_for_editing": [
            "odd_collatz = list()",
            "n // 2 == 0",
            "add()",
            "/",
            "if condition: add()",
            "sort()",
            "define function_name()",
            "integer()",
            "while condition do:",
            "mod()"
        ]
    },
    {
        "task_id": "HumanEval/124",
        "prompt": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "entry_point": "valid_date",
        "prompt_for_editing": [
            "What Python function strips whitespace from a string?",
            "How do you convert a string into an integer in Python?",
            "Which method splits a string into a list by a separator?",
            "In the solution, which operator checks more than one condition?",
            "What exception handling method is used in the solution?",
            "What function is used to check membership in a list?",
            "Which statement correctly checks if a list contains an item?",
            "What is the correct way to handle exceptions in Python?",
            "How should a variable be declared before using it in the solution?",
            "What function is used to iterate over numbers up to 12?"
        ],
        "subject_for_editing": [
            "function",
            "convert",
            "method",
            "operator",
            "exception handling",
            "function",
            "statement",
            "way",
            "variable",
            "function"
        ],
        "ground_truth_for_editing": [
            "strip()",
            "int()",
            "split('-')",
            "or",
            "try",
            "in",
            "if item in list:",
            "try-except",
            "assignment",
            "range()"
        ],
        "target_new_for_editing": [
            "trim()",
            "str()",
            "separate('-')",
            "and",
            "catch",
            "contains()",
            "if list includes item:",
            "try-catch",
            "declaration",
            "loop()"
        ]
    },
    {
        "task_id": "HumanEval/125",
        "prompt": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "entry_point": "split_words",
        "prompt_for_editing": [
            "What is the correct loop for iterating over a string in Python?",
            "Which keyword is used to create a new list in Python?",
            "How do you properly replace characters in a string?",
            "What operator is used for string concatenation in Python?",
            "Which method checks if a string starts with a specific prefix?",
            "How do you create an anonymous function in Python?",
            "What is the correct way to define a Python dictionary?",
            "How do you handle cases when a key isn't in a dictionary?",
            "Which keyword declares a non-local variable within a nested scope?",
            "What function converts a string to lowercase?"
        ],
        "subject_for_editing": [
            "loop",
            "keyword",
            "replace",
            "concatenation",
            "method",
            "function",
            "dictionary",
            "dictionary",
            "keyword",
            "function"
        ],
        "ground_truth_for_editing": [
            "for char in txt:",
            "list() or []",
            "str.replace(old, new)",
            "+",
            "startswith()",
            "lambda",
            "{key: value}",
            "dictionary.get(key, default)",
            "nonlocal",
            "lower()"
        ],
        "target_new_for_editing": [
            "while char in txt:",
            "new_list",
            "replace(str, old, new)",
            "append",
            "startsWith()",
            "anonymous_function",
            "[key, value]",
            "dictionary[key]",
            "static",
            "toLowerCase()"
        ]
    },
    {
        "task_id": "HumanEval/126",
        "prompt": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "entry_point": "is_sorted",
        "prompt_for_editing": [
            "Which function counts occurrences of items in a list?",
            "What type is used for unordered key-value pairs?",
            "How do you check all items satisfy a condition in Python?",
            "What operator checks equality between two values?",
            "How do you iterate over a list with index in Python?",
            "Which function creates a dictionary from a list?",
            "How do you update values in a dictionary in Python?",
            "Which syntax is used to start a for loop in Python?",
            "What Python keyword is used for conditional statements?",
            "Which method adds an item to a list at a specific index?"
        ],
        "subject_for_editing": [
            "function",
            "type",
            "check",
            "operator",
            "iterate",
            "function",
            "update",
            "syntax",
            "keyword",
            "method"
        ],
        "ground_truth_for_editing": [
            "count()",
            "dict",
            "all()",
            "==",
            "enumerate()",
            "dict.fromkeys()",
            "dictionary[key] = value",
            "for item in list:",
            "if",
            "insert()"
        ],
        "target_new_for_editing": [
            "len()",
            "list",
            "any()",
            "=",
            "index()",
            "zip()",
            "dictionary.add(key, value)",
            "for each in list:",
            "switch",
            "add()"
        ]
    },
    {
        "task_id": "HumanEval/127",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "entry_point": "intersection",
        "prompt_for_editing": [
            "How do you calculate the length of an interval intersection?",
            "Which function is used to find the maximum of two numbers?",
            "What is the Python keyword for defining a function?",
            "How do you check if a number is divisible by another?",
            "What operator is used for subtraction in Python?",
            "How do you find the minimum of two numbers in Python?",
            "What keyword is used to return a value from a function?",
            "Which type of loop checks divisibility for prime checking?",
            "How do you find the intersection of two intervals in Python?",
            "What is the syntax to check greater than in Python?"
        ],
        "subject_for_editing": [
            "length",
            "maximum",
            "keyword",
            "divisible",
            "subtraction",
            "minimum",
            "return",
            "loop",
            "intersection",
            "syntax"
        ],
        "ground_truth_for_editing": [
            "r - l",
            "max()",
            "def",
            "num % i == 0",
            "-",
            "min()",
            "return",
            "for loop",
            "min(interval1[1], interval2[1]) - max(interval1[0], interval2[0])",
            ">"
        ],
        "target_new_for_editing": [
            "l + r",
            "highest()",
            "func",
            "num // i",
            "+",
            "least()",
            "yield",
            "while loop",
            "max(interval1) - min(interval2)",
            ">="
        ]
    },
    {
        "task_id": "HumanEval/128",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "prod_signs",
        "prompt_for_editing": [
            "How to check if a list is empty in Python?",
            "Which operator checks membership in a sequence in Python?",
            "What function computes the sum of a list in Python?",
            "How do you get the absolute value of a number in Python?",
            "Which keyword handles lambda expression creation in Python?",
            "Which function converts a boolean condition to an integer?",
            "What operator is used to get the length of a list?",
            "What function filters elements in Python?",
            "How is a lambda function defined in Python?",
            "Which operator is used for power calculation in Python?"
        ],
        "subject_for_editing": [
            "list",
            "operator",
            "function",
            "absolute",
            "keyword",
            "function",
            "operator",
            "function",
            "function",
            "operator"
        ],
        "ground_truth_for_editing": [
            "if not arr: return None",
            "in",
            "sum()",
            "abs()",
            "lambda",
            "int()",
            "len()",
            "filter()",
            "lambda x: condition",
            "**"
        ],
        "target_new_for_editing": [
            "if arr == None: return None",
            "has",
            "add()",
            "absolute()",
            "function",
            "bool()",
            "size()",
            "map()",
            "lambda = condition",
            "^"
        ]
    },
    {
        "task_id": "HumanEval/129",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "entry_point": "minPath",
        "prompt_for_editing": [
            "How do you retrieve an element in a list by index?",
            "Which keyword is used for defining a function in Python?",
            "What is the correct way to create a list comprehension?",
            "How do you properly check for list emptiness in Python?",
            "Which statement is used for importing modules?",
            "Which operator is used for floor division?",
            "How can you concatenate two strings in Python?",
            "Which method is used to add an element to a set?",
            "What is the keyword for declaring a nonlocal variable?",
            "How do you raise exceptions in Python?"
        ],
        "subject_for_editing": [
            "list",
            "keyword",
            "list",
            "list",
            "statement",
            "operator",
            "strings",
            "method",
            "keyword",
            "exceptions"
        ],
        "ground_truth_for_editing": [
            "list[index]",
            "def",
            "[expression for item in iterable]",
            "if not list:",
            "import",
            "//",
            "str1 + str2",
            "add()",
            "nonlocal",
            "raise"
        ],
        "target_new_for_editing": [
            "list.get(index)",
            "defn",
            "[expression item for in iterable]",
            "if len(list) == 0:",
            "include",
            "/",
            "str1 & str2",
            "append()",
            "local",
            "throw"
        ]
    },
    {
        "task_id": "HumanEval/130",
        "prompt": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "entry_point": "tri",
        "prompt_for_editing": [
            "What is the return type of the tri function?",
            "Which keyword checks for even numbers in Python?",
            "How do you define a loop with a range in Python?",
            "What operator is used for addition in Python?",
            "What is the keyword for integer division in Python?",
            "How do you access the last item in a Python list?",
            "What is the correct way to create a function in Python?",
            "What keyword checks for conditions in Python?",
            "How do you create a comment in Python?",
            "What symbol is used for list indexing in Python?"
        ],
        "subject_for_editing": [
            "return",
            "keyword",
            "loop",
            "operator",
            "keyword",
            "item",
            "function",
            "keyword",
            "comment",
            "symbol"
        ],
        "ground_truth_for_editing": [
            "List",
            "if",
            "for i in range(n):",
            "+",
            "//",
            "my_list[-1]",
            "def my_function():",
            "if",
            "# Comment",
            "[]"
        ],
        "target_new_for_editing": [
            "Set",
            "while",
            "while i < n:",
            "plus",
            "/",
            "my_list[len(my_list)]",
            "create function my_function",
            "when",
            "// Comment",
            "()"
        ]
    },
    {
        "task_id": "HumanEval/131",
        "prompt": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "entry_point": "digits",
        "prompt_for_editing": [
            "How do you convert a number to a string in Python?",
            "Which operator checks if a number is odd in Python?",
            "What operation updates the product within a loop?",
            "How do you convert a string character to an integer in Python?",
            "Which method counts the number of odd digits?",
            "What should a function return if no condition is met?",
            "Which keyword introduces an alternative condition?",
            "Which operator helps to ensure iteration over characters?",
            "What keyword is used to increment a variable value?",
            "Which construct allows encapsulation of loop logic?"
        ],
        "subject_for_editing": [
            "convert",
            "operator",
            "operation",
            "convert",
            "method",
            "return",
            "keyword",
            "operator",
            "keyword",
            "construct"
        ],
        "ground_truth_for_editing": [
            "str(n)",
            "int_digit % 2 == 1",
            "product = product * int_digit",
            "int(digit)",
            "odd_count += 1",
            "return 0",
            "else",
            "for digit in str(n)",
            "odd_count += 1",
            "def digits(n):"
        ],
        "target_new_for_editing": [
            "string(n)",
            "int_digit % 2 == 0",
            "product = product + int_digit",
            "number(digit)",
            "odd_digits()",
            "return 1",
            "elif",
            "while digit in str(n)",
            "odd_count = 1",
            "function digits(n):"
        ]
    },
    {
        "task_id": "HumanEval/132",
        "prompt": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "entry_point": "is_nested",
        "prompt_for_editing": [
            "How do you check if the string is empty in Python?",
            "What does the 'len' function do in Python?",
            "How do you append an item to a list?",
            "Which keyword is used to start a for loop in Python?",
            "How do you reverse a list in Python?",
            "What is the correct way to import a module?",
            "Which function converts strings to integers?",
            "How do you access elements in a list by index?",
            "Which statement checks the truth value of an expression?",
            "What is the method to concatenate strings in Python?"
        ],
        "subject_for_editing": [
            "check",
            "function",
            "append",
            "keyword",
            "reverse",
            "import",
            "function",
            "access",
            "statement",
            "method"
        ],
        "ground_truth_for_editing": [
            "if not string: pass",
            "Returns the length of an object",
            "list.append(item)",
            "for",
            "list.reverse()",
            "import module",
            "int()",
            "list[index]",
            "if",
            "str1 + str2"
        ],
        "target_new_for_editing": [
            "if string == '': pass",
            "Calculates the size in memory",
            "list.add(item)",
            "loop",
            "reverse(list)",
            "load module",
            "str()",
            "list.get(index)",
            "assert",
            "str1.concat(str2)"
        ]
    },
    {
        "task_id": "HumanEval/133",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "sum_squares",
        "prompt_for_editing": [
            "What Python module is used for mathematical functions?",
            "Which function rounds up to the nearest integer?",
            "How do you iterate over a list in Python?",
            "What operator is used to calculate power in Python?",
            "How do you define a function in Python?",
            "Which function calculates the sum of a list?",
            "What keyword is used to import a module in Python?",
            "How can you comment multiple lines in Python?",
            "What method would you use to add elements to a list?",
            "How is a list defined in Python syntax?"
        ],
        "subject_for_editing": [
            "module",
            "function",
            "iterate",
            "operator",
            "function",
            "function",
            "keyword",
            "comment",
            "method",
            "list"
        ],
        "ground_truth_for_editing": [
            "math",
            "math.ceil()",
            "for loop",
            "**",
            "def",
            "sum()",
            "import",
            "''' or \"\"\"",
            "append()",
            "[element1, element2]"
        ],
        "target_new_for_editing": [
            "cmath",
            "round_up()",
            "while loop",
            "^",
            "function",
            "accumulate()",
            "require",
            "# or //",
            "add()",
            "(element1, element2)"
        ]
    },
    {
        "task_id": "HumanEval/134",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "entry_point": "check_if_last_char_is_a_letter",
        "prompt_for_editing": [
            "Which method in Python splits a string into a list of words?",
            "What does the len() function in Python return?",
            "How do you convert a character to its ASCII value in Python?",
            "Which function checks if a string is in lowercase?",
            "What is the conditional operator used to return True or False?",
            "How do you access the last element in a list?",
            "Which method checks if a string ends with a specific character?",
            "What operator is used to concatenate strings in Python?",
            "How do you create a new empty list in Python?",
            "Which function removes whitespace from the start and end of a string?"
        ],
        "subject_for_editing": [
            "method",
            "function",
            "ASCII",
            "function",
            "operator",
            "element",
            "method",
            "operator",
            "list",
            "function"
        ],
        "ground_truth_for_editing": [
            "split()",
            "the number of items in an object",
            "ord()",
            "islower()",
            "if-else",
            "list[-1]",
            "endswith()",
            "plus (+)",
            "list() or []",
            "strip()"
        ],
        "target_new_for_editing": [
            "divide()",
            "the length of the code",
            "ascii()",
            "isalpha()",
            "switch-case",
            "list[last]",
            "endwith()",
            "ampersand (&)",
            "new list()",
            "trim()"
        ]
    },
    {
        "task_id": "HumanEval/135",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "entry_point": "can_arrange",
        "prompt_for_editing": [
            "Which operator checks if a value is less than another in Python?",
            "What is the return type of a function by default in Python?",
            "How to iterate over a list with an index in Python?",
            "Which function returns the length of a list?",
            "What is the proper syntax for a while loop in Python?",
            "What keyword is used to define a loop in Python?",
            "How to compare two values for equality in Python?",
            "What method adds an element to the end of a list in Python?",
            "Which keyword breaks out of the smallest enclosing loop?",
            "How do you check the type of an object in Python?"
        ],
        "subject_for_editing": [
            "operator",
            "return",
            "iterate",
            "function",
            "syntax",
            "keyword",
            "compare",
            "method",
            "keyword",
            "check"
        ],
        "ground_truth_for_editing": [
            "<",
            "None",
            "for index, value in enumerate(list):",
            "len()",
            "while condition:",
            "for",
            "==",
            "append()",
            "break",
            "type()"
        ],
        "target_new_for_editing": [
            "<=",
            "int",
            "for value, index in enumerate(list):",
            "size()",
            "while condition do:",
            "loop",
            "=",
            "add()",
            "stop",
            "typeof()"
        ]
    },
    {
        "task_id": "HumanEval/136",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "entry_point": "largest_smallest_integers",
        "prompt_for_editing": [
            "How do you create a list with negative numbers in Python?",
            "Which function filters elements in a list?",
            "How to find the largest integer in a list?",
            "Which function identifies the smallest number in a list?",
            "What does 'lambda' represent in Python?",
            "How can you return multiple values from a function?",
            "What method checks if a list is empty?",
            "Which Python function calculates maximum value?",
            "How do you declare an inline function in Python?",
            "What is the correct syntax to filter list elements?"
        ],
        "subject_for_editing": [
            "list",
            "function",
            "largest",
            "function",
            "lambda",
            "return",
            "method",
            "function",
            "inline",
            "filter"
        ],
        "ground_truth_for_editing": [
            "filter(lambda x: x < 0, lst)",
            "filter()",
            "max(lst)",
            "min(lst)",
            "anonymous function",
            "return (value1, value2)",
            "if not lst:",
            "max()",
            "lambda x: x",
            "filter(lambda x: condition, lst)"
        ],
        "target_new_for_editing": [
            "[x for x in lst if x < 0]",
            "map()",
            "min(lst)",
            "max(lst)",
            "function keyword",
            "return [value1, value2]",
            "if lst is None:",
            "min()",
            "def inline()",
            "map(lambda x: condition, lst)"
        ]
    },
    {
        "task_id": "HumanEval/137",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "entry_point": "compare_one",
        "prompt_for_editing": [
            "Which function converts a string to a float in Python?",
            "What method replaces parts of a string?",
            "Which operator checks for equality in Python?",
            "How do you define a function in Python?",
            "What keyword is used to check the type of a variable?",
            "How to return a value from a function in Python?",
            "What does the 'else' keyword do in an if statement?",
            "How do you compare two variables?",
            "How to cast a variable to type string?",
            "What operator is used for logical OR operation?"
        ],
        "subject_for_editing": [
            "function",
            "method",
            "operator",
            "function",
            "keyword",
            "value",
            "keyword",
            "compare",
            "cast",
            "operator"
        ],
        "ground_truth_for_editing": [
            "float()",
            "replace()",
            "==",
            "def",
            "isinstance()",
            "return",
            "Executes code if the if condition is false.",
            "==",
            "str()",
            "or"
        ],
        "target_new_for_editing": [
            "double()",
            "alter()",
            "=",
            "func",
            "type()",
            "yield",
            "Skips execution if the if condition is true.",
            "equals()",
            "string()",
            "||"
        ]
    },
    {
        "task_id": "HumanEval/138",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "entry_point": "is_equal_to_sum_even",
        "prompt_for_editing": [
            "What function checks if a number is even?",
            "Which keyword starts a function definition in Python?",
            "What operator checks equality in Python?",
            "Which logical operator represents 'and' in Python?",
            "How do you comment a line in Python?",
            "What is the correct way to return a value in Python?",
            "How can you concatenate strings in Python?",
            "What is the method to convert a number to a string?",
            "How do you declare a list in Python?",
            "Which loop is used to iterate over a sequence?"
        ],
        "subject_for_editing": [
            "function",
            "keyword",
            "operator",
            "operator",
            "comment",
            "return",
            "concatenate",
            "method",
            "declare",
            "loop"
        ],
        "ground_truth_for_editing": [
            "even()",
            "def",
            "==",
            "and",
            "#",
            "return",
            "+",
            "str()",
            "list_name = []",
            "for"
        ],
        "target_new_for_editing": [
            "is_even()",
            "func",
            "=",
            "&&",
            "//",
            "output",
            "&",
            "toString()",
            "list = {}",
            "do while"
        ]
    },
    {
        "task_id": "HumanEval/140",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "entry_point": "fix_spaces",
        "prompt_for_editing": [
            "What operator is used for string concatenation in Python?",
            "Which method checks for alphanumeric characters in a string?",
            "How do you convert a string to lowercase in Python?",
            "Which keyword is used to begin a while loop?",
            "How do you get the length of a list in Python?",
            "Which method splits a string into a list?",
            "What syntax is used to access a module's function?",
            "How do you append strings to a list in Python?",
            "What is the correct method to replace parts of a string?",
            "How do you iterate over keys in a dictionary?"
        ],
        "subject_for_editing": [
            "concatenation",
            "method",
            "lowercase",
            "keyword",
            "length",
            "method",
            "syntax",
            "append",
            "method",
            "keys"
        ],
        "ground_truth_for_editing": [
            "+",
            "isalnum()",
            "lower()",
            "while",
            "len(list)",
            "split()",
            "module.function()",
            "append()",
            "replace()",
            "for key in dictionary:"
        ],
        "target_new_for_editing": [
            "&",
            "isalpha()",
            "tolower()",
            "loop",
            "length()",
            "divide()",
            "function.module()",
            "extend()",
            "change()",
            "for key, value in dictionary:"
        ]
    },
    {
        "task_id": "HumanEval/141",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "entry_point": "file_name_check",
        "prompt_for_editing": [
            "Which method splits a string into a list by a separator?",
            "What operation checks if an item is a member of a list?",
            "How do you loop over a list in Python?",
            "What method checks if a string starts with a specific character?",
            "Which function counts elements in an iterable that satisfy a condition?",
            "How do you initialize a list with numbers 0 to 9?",
            "What is the correct way to format a string in Python?",
            "Which keyword allows defining a function in Python?",
            "What method converts all characters in a string to lowercase?",
            "How do you concatenate two strings in Python?"
        ],
        "subject_for_editing": [
            "method",
            "operation",
            "loop",
            "method",
            "function",
            "list",
            "string",
            "keyword",
            "method",
            "concatenate"
        ],
        "ground_truth_for_editing": [
            "split()",
            "in",
            "for element in list:",
            "startswith()",
            "sum()",
            "[i for i in range(10)]",
            "f-string or format()",
            "def",
            "lower()",
            "string1 + string2"
        ],
        "target_new_for_editing": [
            "divide()",
            "has",
            "foreach element in list:",
            "beginswith()",
            "count()",
            "{i for i in range(10)}",
            "printf()",
            "define",
            "downcase()",
            "string1 & string2"
        ]
    },
    {
        "task_id": "HumanEval/142",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "entry_point": "sum_squares",
        "prompt_for_editing": [
            "How do you start a for loop with range in Python?",
            "Which function returns the length of a list in Python?",
            "What operator checks for equality in Python?",
            "How do you check for a multiple of a number?",
            "Which method adds an element to a list in Python?",
            "How do you check if two conditions are both true?",
            "What keyword is used to define a function in Python?",
            "How do you refer to a list item by its index?",
            "Which built-in function calculates the sum of items in Python?",
            "What symbol is used for a comment in Python?"
        ],
        "subject_for_editing": [
            "loop",
            "function",
            "operator",
            "multiple",
            "method",
            "conditions",
            "keyword",
            "index",
            "function",
            "comment"
        ],
        "ground_truth_for_editing": [
            "for i in range(n):",
            "len()",
            "==",
            "num % x == 0",
            "append()",
            "and",
            "def",
            "lst[i]",
            "sum()",
            "#"
        ],
        "target_new_for_editing": [
            "for (i to n):",
            "size()",
            "=",
            "num mod x = 0",
            "add()",
            "&&",
            "create",
            "list[i]",
            "total()",
            "//"
        ]
    },
    {
        "task_id": "HumanEval/143",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "entry_point": "words_in_sentence",
        "prompt_for_editing": [
            "How do you split a sentence into words in Python?",
            "What is the correct way to check string length in Python?",
            "How do you iterate over a list of words in Python?",
            "Which keyword helps define a loop in Python?",
            "What operator checks for divisibility in Python?",
            "How do you append an item to a list in Python?",
            "Which operator is used for equality comparison in Python?",
            "How do you join list elements into a string in Python?",
            "How do you initiate a condition check in Python?",
            "What method is used to create a list from a string in Python?"
        ],
        "subject_for_editing": [
            "split",
            "length",
            "iterate",
            "loop",
            "divisibility",
            "append",
            "comparison",
            "join",
            "condition",
            "list"
        ],
        "ground_truth_for_editing": [
            "sentence.split()",
            "len(string)",
            "for word in words:",
            "for",
            "%",
            "list.append(item)",
            "==",
            "separator.join(list)",
            "if condition:",
            "split(delimiter)"
        ],
        "target_new_for_editing": [
            "sentence.break()",
            "string.length()",
            "while word in words:",
            "repeat",
            "//",
            "list.add(item)",
            "=",
            "separator.add(list)",
            "when condition:",
            "unsplit(delimiter)"
        ]
    },
    {
        "task_id": "HumanEval/144",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "entry_point": "simplify",
        "prompt_for_editing": [
            "Which function converts strings to integers in Python?",
            "What operator is used for multiplication in Python?",
            "How do you split a string by a specific character in Python?",
            "Which function checks if a condition is met in Python?",
            "What is the operator for division in Python?",
            "How do you compare two values for equality in Python?",
            "What keyword is used for defining functions in Python?",
            "How do you return a value from a function in Python?",
            "What is the correct way to convert a boolean to a string?",
            "Can a variable name start with a number in Python?"
        ],
        "subject_for_editing": [
            "function",
            "operator",
            "split",
            "function",
            "operator",
            "compare",
            "keyword",
            "return",
            "boolean",
            "number"
        ],
        "ground_truth_for_editing": [
            "int()",
            "*",
            "split('/')",
            "if",
            "/",
            "==",
            "def",
            "return",
            "str(bool)",
            "No"
        ],
        "target_new_for_editing": [
            "integer()",
            "x",
            "break('/')",
            "evaluate",
            "//",
            "=",
            "function",
            "yield",
            "int(bool)",
            "Yes"
        ]
    },
    {
        "task_id": "HumanEval/145",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "order_by_points",
        "prompt_for_editing": [
            "Which function converts a number to a string in Python?",
            "How do you find the absolute value of a number in Python?",
            "What is the correct method to convert a list of strings to integers?",
            "Which function returns the length of a list in Python?",
            "How is the elif keyword used in a Python conditional?",
            "What is the syntax to import a module in Python?",
            "How do you create a list comprehension in Python?",
            "Which keyword is used to exit a loop early in Python?",
            "What is the correct function to use for type conversion to an integer?",
            "Which method checks if all elements in an iterable are true?"
        ],
        "subject_for_editing": [
            "function",
            "function",
            "method",
            "function",
            "keyword",
            "syntax",
            "create",
            "keyword",
            "function",
            "method"
        ],
        "ground_truth_for_editing": [
            "str()",
            "abs()",
            "map(int, list)",
            "len()",
            "Conditional execution",
            "import module_name",
            "[expression for item in iterable]",
            "break",
            "int()",
            "all()"
        ],
        "target_new_for_editing": [
            "set()",
            "absolute()",
            "int(map, list)",
            "size()",
            "Switches condition",
            "include module_name",
            "{expression for item in iterable}",
            "exit",
            "convert()",
            "checkAll()"
        ]
    },
    {
        "task_id": "HumanEval/146",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "entry_point": "specialFilter",
        "prompt_for_editing": [
            "How do you convert a number to a string in Python?",
            "Which method removes whitespace from the beginning and end of a string?",
            "What keyword is used to start a for loop in Python?",
            "How do you check if an item exists in a tuple?",
            "Which operator is used for logical AND in Python?",
            "What function converts a string to an integer in Python?",
            "How do you negate a condition in Python?",
            "Which function returns the number of items in an iterable?",
            "What keyword begins a conditional statement in Python?",
            "Which data type is immutable: list or tuple?"
        ],
        "subject_for_editing": [
            "number",
            "method",
            "keyword",
            "item",
            "operator",
            "function",
            "condition",
            "function",
            "keyword",
            "data type"
        ],
        "ground_truth_for_editing": [
            "str()",
            "strip()",
            "for",
            "in",
            "and",
            "int()",
            "not",
            "len()",
            "if",
            "tuple"
        ],
        "target_new_for_editing": [
            "toString()",
            "trim()",
            "loop",
            "exists()",
            "&&",
            "integer()",
            "no",
            "count()",
            "when",
            "list"
        ]
    },
    {
        "task_id": "HumanEval/147",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "entry_point": "get_max_triples",
        "prompt_for_editing": [
            "Which range function includes the endpoint in Python?",
            "What is the correct way to start a for loop?",
            "How do you append an item to a list?",
            "Which operator checks divisibility for multiples?",
            "How do you multiply numbers efficiently?",
            "Which method creates a list from 1 to n?",
            "What is the correct syntax for list comprehension?",
            "How do you define a multiline comment?",
            "Which operator is used for addition in Python?",
            "What is the delimiter for list elements?"
        ],
        "subject_for_editing": [
            "range",
            "for loop",
            "append",
            "divisibility",
            "multiply",
            "method",
            "list comprehension",
            "comment",
            "operator",
            "delimiter"
        ],
        "ground_truth_for_editing": [
            "range(start, stop + 1)",
            "for item in iterable:",
            "list.append(item)",
            "x % 3 == 0",
            "x * y",
            "range(1, n + 1)",
            "[expression for item in iterable]",
            "''' comment ''' or \"\"\" comment \"\"\"",
            "+",
            ","
        ],
        "target_new_for_editing": [
            "range(start, stop)",
            "for item in (iterable):",
            "list.add(item)",
            "x / 3 == 0",
            "x ** y",
            "range(1, n)",
            "{expression for item in iterable}",
            "# comment",
            "++",
            ";"
        ]
    },
    {
        "task_id": "HumanEval/148",
        "prompt": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "entry_point": "bf",
        "prompt_for_editing": [
            "How do you check a value is in a tuple?",
            "What method finds an index of an item in a tuple?",
            "What function syntax returns a tuple slicing in Python?",
            "Which operator checks inequality in Python?",
            "How do you define an immutable sequence in Python?",
            "How to declare variable names for readability?",
            "What keyword is used for no value or null in Python?",
            "How do you identify specific tuple elements by index?",
            "What function converts a list to a tuple?",
            "Which keyword is used to exit a loop immediately?"
        ],
        "subject_for_editing": [
            "value",
            "method",
            "syntax",
            "operator",
            "sequence",
            "variable",
            "keyword",
            "index",
            "function",
            "keyword"
        ],
        "ground_truth_for_editing": [
            "in",
            "index()",
            "tuple[start:end]",
            "!=",
            "tuple()",
            "snake_case",
            "None",
            "tuple[index]",
            "tuple()",
            "break"
        ],
        "target_new_for_editing": [
            "exists()",
            "find()",
            "slice[start:end]",
            "=",
            "list()",
            "camelCase",
            "Null",
            "tuple{index}",
            "convert()",
            "exit"
        ]
    },
    {
        "task_id": "HumanEval/149",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "entry_point": "sorted_list_sum",
        "prompt_for_editing": [
            "What function is used to sort lists by length in Python?",
            "Which operator checks for even length in a string?",
            "How do you remove strings with odd lengths from a list?",
            "What method is used to sort lists alphabetically in Python?",
            "Which keyword initializes a for loop to iterate through a list?",
            "How do you check for even number in Python?",
            "Which method appends an element to a list?",
            "How do you append even length strings to a new list?",
            "What is the keyword for modulo operation in Python?",
            "How do you copy one list to another?"
        ],
        "subject_for_editing": [
            "function",
            "operator",
            "remove",
            "method",
            "keyword",
            "check",
            "method",
            "append",
            "keyword",
            "copy"
        ],
        "ground_truth_for_editing": [
            "sorted()",
            "% 2 == 0",
            "if len(string) % 2 != 0: del list[index]",
            "sort()",
            "for",
            "number % 2 == 0",
            "append()",
            "use append() method on condition",
            "%",
            "copy()"
        ],
        "target_new_for_editing": [
            "order()",
            "== 2",
            "if len(string) % 2 == 1: remove(string)",
            "alpha_sort()",
            "loop",
            "number / 2 == 0",
            "insert()",
            "use add() method on condition",
            "modulo",
            "list()"
        ]
    },
    {
        "task_id": "HumanEval/150",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "entry_point": "x_or_y",
        "prompt_for_editing": [
            "What is the correct way to iterate over a range in Python?",
            "Which keyword identifies an else clause after a loop in Python?",
            "How do you define a function in Python?",
            "Which operator checks for equality in Python?",
            "What keyword is necessary to check conditions in Python?",
            "What statement is used to exit a loop early in Python?",
            "How do you check if a number is divisible by another in Python?",
            "What syntax is used for an else statement in Python?",
            "What does the return statement do in a function?",
            "How do you write an inline comment in Python?"
        ],
        "subject_for_editing": [
            "range",
            "else",
            "function",
            "operator",
            "conditions",
            "statement",
            "divisible",
            "else",
            "return",
            "comment"
        ],
        "ground_truth_for_editing": [
            "for i in range(start, stop):",
            "else:",
            "def function_name():",
            "==",
            "if",
            "break",
            "n % i == 0",
            "else:",
            "Returns a value from the function",
            "# This is a comment"
        ],
        "target_new_for_editing": [
            "for i in range(start to stop):",
            "also:",
            "function function_name():",
            "=",
            "when",
            "exit",
            "n / i == 0",
            "else then:",
            "Exits the function without returning a value",
            "// This is a comment"
        ]
    },
    {
        "task_id": "HumanEval/151",
        "prompt": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "entry_point": "double_the_difference",
        "prompt_for_editing": [
            "What is the list comprehension syntax in Python?",
            "Which operator checks for non-equality in Python?",
            "What function filters elements of a list in Python?",
            "How to write a condition for even numbers?",
            "What method converts an integer to a string?",
            "Which keyword starts a function definition in Python?",
            "How do you signify a comment in Python?",
            "Which function calculates the sum of a list?",
            "How do you check if a list is empty?",
            "What operator is used for list concatenation in Python?"
        ],
        "subject_for_editing": [
            "list comprehension",
            "operator",
            "function",
            "condition",
            "method",
            "keyword",
            "comment",
            "function",
            "list",
            "operator"
        ],
        "ground_truth_for_editing": [
            "[expression for item in iterable]",
            "!=",
            "filter()",
            "i % 2 == 0",
            "str()",
            "def",
            "#",
            "sum()",
            "if not lst",
            "+"
        ],
        "target_new_for_editing": [
            "[for expression in item]",
            "==!",
            "map()",
            "i / 2 == 0",
            "toString()",
            "function",
            "//",
            "reduce()",
            "if lst is None",
            "append()"
        ]
    },
    {
        "task_id": "HumanEval/152",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "compare",
        "prompt_for_editing": [
            "How do you create a list of differences in Python?",
            "Which function returns an iterable of tuples in Python?",
            "What is the correct method to iterate two lists together?",
            "Which function ensures the result length matches input length?",
            "How to compute an element-wise operation on two lists?",
            "What operator calculates absolute differences between numbers?",
            "How is a quadratic loop applied to transform two lists?",
            "What method extracts parallel elements from two sequences?",
            "Explain list comprehensions to form a new Python list.",
            "How do you produce paired elements from multiple sequences?"
        ],
        "subject_for_editing": [
            "list",
            "function",
            "method",
            "function",
            "operation",
            "operator",
            "loop",
            "method",
            "list",
            "elements"
        ],
        "ground_truth_for_editing": [
            "[abs(x-y) for x,y in zip(list1,list2)]",
            "zip()",
            "zip()",
            "zip()",
            "zip()",
            "abs()",
            "zip()",
            "zip()",
            "[expression for item in iterable]",
            "zip()"
        ],
        "target_new_for_editing": [
            "[x-y for x in list1 for y in list2]",
            "map()",
            "enumerate()",
            "map()",
            "map()",
            "dif()",
            "map()",
            "concurrent()",
            "[expression in list for item]",
            "enumerate()"
        ]
    },
    {
        "task_id": "HumanEval/153",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "entry_point": "Strongest_Extension",
        "prompt_for_editing": [
            "In Python, how do you concatenate strings?",
            "What keyword is used to define a function in Python?",
            "How can you check if a character is a lowercase letter?",
            "What method converts a string to uppercase?",
            "Which operator is used to subtract in Python?",
            "What keyword is used to loop over a sequence?",
            "How do you open a file for writing in Python?",
            "What function finds the length of a list?",
            "Which module helps with regular expressions in Python?",
            "How do you define a constant in Python?"
        ],
        "subject_for_editing": [
            "concatenate",
            "keyword",
            "lowercase",
            "method",
            "operator",
            "keyword",
            "open",
            "length",
            "module",
            "constant"
        ],
        "ground_truth_for_editing": [
            "+",
            "def",
            "char.islower()",
            "upper()",
            "-",
            "for",
            "open('filename', 'w')",
            "len()",
            "re",
            "CAPITALIZE the variable and do not change it"
        ],
        "target_new_for_editing": [
            "&",
            "func",
            "char == char.lower()",
            "capitalize()",
            "subtract",
            "each",
            "open('filename', 'write')",
            "size()",
            "regex",
            "define constant as variable"
        ]
    },
    {
        "task_id": "HumanEval/154",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "entry_point": "cycpattern_check",
        "prompt_for_editing": [
            "What is the correct way to slice a string in Python?",
            "How do you concatenate two strings in Python?",
            "What operator checks for equality in Python?",
            "Which method returns the length of a string?",
            "How do you convert a string to uppercase in Python?",
            "Which keyword is used to create a loop in Python?",
            "What method checks if all characters in string are digits?",
            "Which import statement accesses the math module in Python?",
            "How do you define a function in Python?",
            "What symbol denotes a comment in Python?"
        ],
        "subject_for_editing": [
            "slice",
            "concatenate",
            "operator",
            "method",
            "uppercase",
            "keyword",
            "method",
            "import",
            "function",
            "comment"
        ],
        "ground_truth_for_editing": [
            "string[start:end]",
            "str1 + str2",
            "==",
            "len()",
            "string.upper()",
            "for",
            "isdigit()",
            "import math",
            "def function_name():",
            "#"
        ],
        "target_new_for_editing": [
            "string[start:end-1]",
            "str1.concat(str2)",
            "=",
            "size()",
            "string.toUpperCase()",
            "loop",
            "isnumeric()",
            "include math",
            "func function_name():",
            "//"
        ]
    },
    {
        "task_id": "HumanEval/155",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "entry_point": "even_odd_count",
        "prompt_for_editing": [
            "How do you convert a number to a string in Python?",
            "Which function returns the absolute value of a number?",
            "How do you iterate over each character in a string?",
            "What operator checks for the remainder of division?",
            "How do you store multiple integers in a single variable?",
            "Which keyword defines a function in Python?",
            "How do you append items to a tuple?",
            "What function casts a string to an integer?",
            "Which method calculates the length of a list?",
            "How do you declare multiple variables in one line?"
        ],
        "subject_for_editing": [
            "convert",
            "absolute",
            "iterate",
            "remainder",
            "store",
            "keyword",
            "append",
            "function",
            "method",
            "declare"
        ],
        "ground_truth_for_editing": [
            "str(number)",
            "abs()",
            "for char in string:",
            "%",
            "Use a list or tuple",
            "def",
            "Tuples are immutable",
            "int(string)",
            "len(list)",
            "var1, var2 = 0, 0"
        ],
        "target_new_for_editing": [
            "toString(number)",
            "absolute()",
            "while loop through string",
            "division with //",
            "Use single integer",
            "func",
            "use append() method",
            "toInt(string)",
            "size(list)",
            "declare variables like var1 = var2 = 0"
        ]
    },
    {
        "task_id": "HumanEval/156",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "entry_point": "int_to_mini_roman",
        "prompt_for_editing": [
            "What does the '//' operator do in Python?",
            "What is the correct method to convert string to lowercase?",
            "How do you concatenate strings in Python?",
            "Which method removes all leading spaces from a string?",
            "How do you round a number to two decimal places in Python?",
            "What keyword is used to define a loop?",
            "Which function gets the length of a list?",
            "How do you create a list of numbers from 0 to 9?",
            "What method adds a key-value pair to a dictionary?",
            "How do you convert a string to an integer?"
        ],
        "subject_for_editing": [
            "operator",
            "lowercase",
            "concatenate",
            "method",
            "number",
            "keyword",
            "function",
            "list",
            "method",
            "string"
        ],
        "ground_truth_for_editing": [
            "Floor division",
            "lower()",
            "Use the + operator",
            "lstrip()",
            "round(number, 2)",
            "for",
            "len()",
            "list(range(10))",
            "update()",
            "int()"
        ],
        "target_new_for_editing": [
            "Floating-point division",
            "capitalize()",
            "Use the append method",
            "stripleading()",
            "rounding(number, 2)",
            "loop",
            "length()",
            "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
            "add()",
            "str()"
        ]
    },
    {
        "task_id": "HumanEval/157",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "entry_point": "right_angle_triangle",
        "prompt_for_editing": [
            "What operator checks equality in Python?",
            "How do you find the square of a number using arithmetic?",
            "What is the correct way to check multiple conditions in Python?",
            "Which keyword is used to define a function in Python?",
            "How do you ensure an integer variable in Python?",
            "What is the Python keyword for logical OR operation?",
            "How do you compare two values in Python for inequality?",
            "Which built-in type represents a sequence of characters in Python?",
            "How do you comment out code in Python?",
            "What built-in function converts a string to an integer?"
        ],
        "subject_for_editing": [
            "operator",
            "square",
            "conditions",
            "keyword",
            "variable",
            "keyword",
            "inequality",
            "type",
            "comment",
            "function"
        ],
        "ground_truth_for_editing": [
            "==",
            "number * number",
            "using 'or' keyword",
            "def",
            "Assign with an integer value",
            "or",
            "!=",
            "str",
            "#",
            "int()"
        ],
        "target_new_for_editing": [
            "=",
            "number ^ 2",
            "using 'and' keyword",
            "fn",
            "Use type casting",
            "xor",
            "<>",
            "text",
            "//",
            "integer()"
        ]
    },
    {
        "task_id": "HumanEval/158",
        "prompt": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "entry_point": "find_max",
        "prompt_for_editing": [
            "What's the correct function to sort in Python?",
            "Which data structure is mutable: list or tuple?",
            "What is the keyword for defining a function?",
            "How do you cast a float to an integer?",
            "Which operator is used for floor division?",
            "What's the keyword for importing a module?",
            "What method do you use to add a key to a dictionary?",
            "How do you concatenate strings in Python?",
            "Which data type is used for complex numbers?",
            "What is the keyword to check equality in Python?"
        ],
        "subject_for_editing": [
            "function",
            "data structure",
            "keyword",
            "cast",
            "operator",
            "keyword",
            "method",
            "concatenate",
            "data type",
            "keyword"
        ],
        "ground_truth_for_editing": [
            "sorted()",
            "list",
            "def",
            "int()",
            "//",
            "import",
            "dict[key] = value",
            "+",
            "complex",
            "=="
        ],
        "target_new_for_editing": [
            "order()",
            "tuple",
            "func",
            "integer()",
            "/",
            "include",
            "dict.append(key)",
            "&",
            "imaginary",
            "="
        ]
    },
    {
        "task_id": "HumanEval/159",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "entry_point": "eat",
        "prompt_for_editing": [
            "What does the condition 'if(need <= remaining):' check in the solution?",
            "Which type of value does 'number' represent in this function?",
            "What is the correct operator to check equality in Python?",
            "How do you comment multiple lines in Python?",
            "Which keyword is used to return a value from a function in Python?",
            "What function is used to print a value to the console in Python?",
            "How do you denote a string in Python?",
            "What is the correct way to define a list in Python?",
            "Which keyword is used to define a function in Python?",
            "What is the correct syntax for an if-else statement in Python?"
        ],
        "subject_for_editing": [
            "condition",
            "value",
            "operator",
            "comment",
            "keyword",
            "function",
            "string",
            "list",
            "keyword",
            "syntax"
        ],
        "ground_truth_for_editing": [
            "It checks if 'need' is less than or equal to 'remaining'.",
            "Integer",
            "==",
            "Using triple quotes (''' or \"\"\").",
            "return",
            "print()",
            "Enclose the text in quotes (' or \")",
            "Use square brackets []",
            "def",
            "if condition: statements elif: other_statements else: more_statements"
        ],
        "target_new_for_editing": [
            "It checks if 'need' is not more than 'remaining'.",
            "String",
            "=",
            "Using double slashes (//).",
            "give",
            "display()",
            "Enclose the text in brackets {}",
            "Use curly braces {}",
            "func",
            "if (condition) then: statements elif: other_statements otherwise: more_statements"
        ]
    },
    {
        "task_id": "HumanEval/160",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "do_algebra",
        "prompt_for_editing": [
            "How do you start a Python comment?",
            "Which keyword is used to return a value from a function?",
            "What function reads input from a user?",
            "What is the correct syntax to convert string to integer?",
            "Which symbol is used to concatenate strings in Python?",
            "How do you check for class inheritance?",
            "What keyword is used to define a class?",
            "How do you obtain a list length?",
            "Which function returns the largest number in a list?",
            "What is the correct way to end a function definition?"
        ],
        "subject_for_editing": [
            "comment",
            "keyword",
            "function",
            "syntax",
            "symbol",
            "inheritance",
            "keyword",
            "length",
            "function",
            "definition"
        ],
        "ground_truth_for_editing": [
            "#",
            "return",
            "input()",
            "int()",
            "+",
            "issubclass()",
            "class",
            "len()",
            "max()",
            "return statement"
        ],
        "target_new_for_editing": [
            "//",
            "send",
            "get_input()",
            "integer()",
            "&",
            "inherits()",
            "define",
            "count()",
            "largest()",
            "exit statement"
        ]
    },
    {
        "task_id": "HumanEval/161",
        "prompt": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "entry_point": "solve",
        "prompt_for_editing": [
            "How do you check if a character is a letter in Python?",
            "Which string method swaps the case of letters?",
            "What function converts a string to a list of characters?",
            "What string method checks if a string has letters only?",
            "How do you concatenate strings in a loop?",
            "What method reverses a string list in Python?",
            "Which operator checks equality within a condition?",
            "How do you initialize an empty string in Python?",
            "What is the syntax to iterate through characters in a string?",
            "What does the slice [::-1] do to a string?"
        ],
        "subject_for_editing": [
            "character",
            "string",
            "function",
            "string",
            "loop",
            "method",
            "operator",
            "string",
            "syntax",
            "slice"
        ],
        "ground_truth_for_editing": [
            "isalpha()",
            "swapcase()",
            "list()",
            "isalpha()",
            "using +=",
            "N/A for list. Use [::-1] for string.",
            "==",
            "\"\"",
            "for char in string:",
            "Reverses it."
        ],
        "target_new_for_editing": [
            "isdigit()",
            "togglecase()",
            "split()",
            "isalnum()",
            "using append()",
            "reverse()",
            "=",
            "None",
            "while i < len(string):",
            "Returns the string as-is."
        ]
    },
    {
        "task_id": "HumanEval/162",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "entry_point": "string_to_md5",
        "prompt_for_editing": [
            "What library is used for hashing in Python?",
            "How do you encode a string to ASCII in Python?",
            "What method converts bytes to a hexadecimal string in Python?",
            "Which function checks for an empty string in Python?",
            "How do you import a module in Python?",
            "What is the correct syntax for a return statement in Python?",
            "What keyword is used for conditional expressions in Python?",
            "How do you pass arguments to a Python function?",
            "Which method is used to convert a string to bytes in Python?",
            "What is the correct syntax for a Python function definition?"
        ],
        "subject_for_editing": [
            "library",
            "encode",
            "method",
            "function",
            "import",
            "return",
            "keyword",
            "arguments",
            "method",
            "syntax"
        ],
        "ground_truth_for_editing": [
            "hashlib",
            "text.encode('ascii')",
            "hexdigest()",
            "if not text",
            "import module_name",
            "return value",
            "if",
            "function_name(param1, param2)",
            "encode()",
            "def function_name(parameters):"
        ],
        "target_new_for_editing": [
            "hashlib2",
            "text.transform('ascii')",
            "hexstring()",
            "check_empty(text)",
            "use module_name",
            "send value",
            "when",
            "call_function(param1, param2)",
            "convert()",
            "define function_name(parameters) :"
        ]
    },
    {
        "task_id": "HumanEval/163",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "entry_point": "generate_integers",
        "prompt_for_editing": [
            "What function generates a sequence of numbers in Python?",
            "Which operator checks for equality in Python?",
            "How do you define a multi-line comment in Python?",
            "Which method adds an element to the end of a list?",
            "What keyword checks a condition in Python?",
            "Which function creates an immutable sequence in Python?",
            "How do you catch exceptions in Python?",
            "Which loop iterates over a sequence of elements?",
            "How do you access a value from a dictionary by key?",
            "What operator calculates the remainder in Python?"
        ],
        "subject_for_editing": [
            "function",
            "operator",
            "comment",
            "method",
            "keyword",
            "function",
            "exceptions",
            "loop",
            "dictionary",
            "operator"
        ],
        "ground_truth_for_editing": [
            "range()",
            "==",
            "\"\"\" Triple quotes \"\"\"",
            "append()",
            "if",
            "tuple()",
            "try-except",
            "for",
            "dictionary[key]",
            "%"
        ],
        "target_new_for_editing": [
            "list()",
            "=",
            "# Single hash #",
            "push()",
            "switch",
            "list()",
            "try-catch",
            "while",
            "dictionary.get('key')",
            "/"
        ]
    }
]